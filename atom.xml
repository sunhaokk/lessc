<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Da&#39;sBlog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunhao.win/"/>
  <updated>2017-04-19T08:28:39.806Z</updated>
  <id>http://sunhao.win/</id>
  
  <author>
    <name>Sun Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php-php7-fpm默认监听的scok</title>
    <link href="http://sunhao.win/2017/04/19/php-php7-listen/"/>
    <id>http://sunhao.win/2017/04/19/php-php7-listen/</id>
    <published>2017-04-19T08:26:29.000Z</published>
    <updated>2017-04-19T08:28:39.806Z</updated>
    
    <content type="html"><![CDATA[<p>php7-fpm默认监听的scok。和以前不一样 。以前是监听9000端口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line"></div><div class="line">        listen 80;</div><div class="line"></div><div class="line">        server_name ityhc.com www.ityhc.com;</div><div class="line">        root /var/www/html/ityhc;</div><div class="line">        index index.html index.htm index.php;   </div><div class="line"></div><div class="line">        location ~ \.php?.*$ &#123;  </div><div class="line">        root /var/www/html/ityhc;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_pass unix:/run/php/php7.0-fpm.sock;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;  </div><div class="line">        include        fastcgi_params;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php7-fpm默认监听的scok。和以前不一样 。以前是监听9000端口。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        listen 80;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        server_name ityhc.com www.ityhc.com;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        root /var/www/html/ityhc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        index index.html index.htm index.php;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        location ~ \.php?.*$ &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        root /var/www/html/ityhc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fastcgi_index index.php;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fastcgi_pass unix:/run/php/php7.0-fpm.sock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        include        fastcgi_params;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://sunhao.win/categories/php/"/>
    
    
      <category term="listen" scheme="http://sunhao.win/tags/listen/"/>
    
  </entry>
  
  <entry>
    <title>php-interfaces-and-traits</title>
    <link href="http://sunhao.win/2017/04/18/php-interfaces-and-traits/"/>
    <id>http://sunhao.win/2017/04/18/php-interfaces-and-traits/</id>
    <published>2017-04-18T00:37:27.000Z</published>
    <updated>2017-04-18T09:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="interfaces和traits-超强组合"><a href="#interfaces和traits-超强组合" class="headerlink" title="interfaces和traits,超强组合"></a>interfaces和traits,超强组合</h3><p>译者注:<br>老歪，写的文章特别详细，一句话会说好几遍，语义我删减了点。但尽可能保持原意。<br>如果你还没有用php的interfaces, 会错过面向对象的强大特性.  在PHP 5.4中Interfaces和traits配合十分强大.<br>Interfaces不在类中，类必须实现interface里约定的方法. </p>
<p>假设我们有个User的类. Users有个地址，我们把地址通过应用邮件包传给PackageShipper（托运人） :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"> <span class="comment">// ... setters and getters for address fields ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// ... other user logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageShipper</span> </span>&#123;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shipTo</span><span class="params">(User $user)</span> </span>&#123;</div><div class="line">  $address = $user-&gt;getAddress();</div><div class="line"></div><div class="line">  <span class="comment">// ... do shipping code using $address ...</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们的应用愉快的传递包, 直到有一天我们有个需求， Companies(公司) 也需要传递包. 我们创建一个公司类来处理:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// ... other company logic ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们遇到一个问题. PackageShipper只知道处理Users. 我们需要PackageShipper类处理任何地址.</p>
<p>我们可以创建基类(就是基本的类) ,Users 和 Companies 集成它,PackageShipper允许任何来至继承 base 的类. 这么做不令人满意. 从含义上讲, Users 和 Companies 是两个不同实体, 他们没有太多的共性用于base继承. 除了地址其他没有一样的了. 还有一些类或许已经继承了别的类, 因为php是单继承的，我们没办法再继承了.</p>
<p>所以, 我们可以用 interface定义一个PackageShipper处理的 Users 和 Companies公共部分 . 然后, Users 和 Companies继承interface, PackageShipper只需要处理继承接口的对象.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">inteface Addressable &#123;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span></span>;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// ... other user logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">// ... other company logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageShipper</span> </span>&#123;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shipTo</span><span class="params">(Addressable $entity)</span> </span>&#123;</div><div class="line">  $address = $entity-&gt;getAddress();</div><div class="line"></div><div class="line">  <span class="comment">// ... do shipping code using $address ...</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个类可以继承多个不同interfaces, 不同基类可以继承同样的interface.</p>
<p>但是这还是有一个问题. Company和User 用同样代码继承Addressable . 这样太浪费了;只要还有接口约束, 继承来至接口类没必要都一样. 但是, 它们都继承了接口, 我们要复制代码. 如果还要第三个Addressable,同样继承interface, 将会带来更多的重复.</p>
<p>如果你使用PHP 5.3 版本以下, 没办法解决的. 但是如果使用PHP 5.4, 有种新的方式可以解决这种问题: traits.</p>
<p>trait类似于类，因为它们都实现方法和属性。不同的是，类可以实例化，但是trait不能。相反，trait可以添加到类定义，给该类的所有定义的方法和属性定义在trait中</p>
<p>traits就像一个宏一样:在类中使用traits和traits中的代码复制到类是一样的。</p>
<p>用traits,我们可以清除重复的代码 ，保持Addressable接口的定义:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">trait</span> AddressAccessor &#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">use</span> <span class="title">AddressAccessor</span>;</div><div class="line"></div><div class="line"> <span class="comment">// ... other user logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">use</span> <span class="title">AddressAccessor</span>;</div><div class="line"></div><div class="line"> <span class="comment">// ... other company logic ...</span></div></pre></td></tr></table></figure>
<p> 现在，任何类可以通过AddressAccessor trait继承Addressable接口 . 重复的代码都可以移除.</p>
<p>trait本身不继承Addressable. 这就是为什么只有classes 可以继承 interfaces. 注意trait的优先级别要小于类里面的。</p>
<p>Interfaces保证 PHP执行正确的代码. 和traits结合, 定义了一个快速开发的强大工具, 减少重复的代码,更易读,更好维护.</p>
<p>下面是应用的最终代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"> <span class="comment">// ... setters and getters for address fields ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">inteface Addressable &#123;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span></span>;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">trait</span> AddressAccessor &#123;</div><div class="line"> <span class="keyword">protected</span> $address;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">(Address $address)</span> </span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;address = $address;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;address;</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">use</span> <span class="title">AddressAccessor</span>;</div><div class="line"></div><div class="line"> <span class="comment">// ... other user logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">implements</span> <span class="title">Addressable</span> </span>&#123;</div><div class="line"> <span class="keyword">use</span> <span class="title">AddressAccessor</span>;</div><div class="line"></div><div class="line"> <span class="comment">// ... other company logic ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PackageShipper</span> </span>&#123;</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shipTo</span><span class="params">(Addressable $entity)</span> </span>&#123;</div><div class="line">  $address = $entity-&gt;getAddress();</div><div class="line"></div><div class="line">  <span class="comment">// ... do shipping code using $address ...</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 简单点说，接口用于限制，traits减少重复代码。</p>
<p>原文:<br><a href="http://blog.everymansoftware.com/2012/09/interfaces-and-traits-powerful-combo.html" target="_blank" rel="external">http://blog.everymansoftware.com/2012/09/interfaces-and-traits-powerful-combo.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;interfaces和traits-超强组合&quot;&gt;&lt;a href=&quot;#interfaces和traits-超强组合&quot; class=&quot;headerlink&quot; title=&quot;interfaces和traits,超强组合&quot;&gt;&lt;/a&gt;interfaces和traits,超强组合&lt;/h3&gt;&lt;p&gt;译者注:&lt;br&gt;老歪，写的文章特别详细，一句话会说好几遍，语义我删减了点。但尽可能保持原意。&lt;br&gt;如果你还没有用php的interfaces, 会错过面向对象的强大特性.  在PHP 5.4中Interfaces和traits配合十分强大.&lt;br&gt;Interfaces不在类中，类必须实现interface里约定的方法. &lt;/p&gt;
&lt;p&gt;假设我们有个User的类. Users有个地址，我们把地址通过应用邮件包传给PackageShipper（托运人） :&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Address&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// ... setters and getters for address fields ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; $address;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAddress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Address $address)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;address = $address;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;address;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// ... other user logic ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PackageShipper&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shipTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(User $user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $address = $user-&amp;gt;getAddress();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ... do shipping code using $address ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://sunhao.win/categories/php/"/>
    
    
      <category term="interfaces" scheme="http://sunhao.win/tags/interfaces/"/>
    
      <category term="traits" scheme="http://sunhao.win/tags/traits/"/>
    
  </entry>
  
  <entry>
    <title>linux-fifo</title>
    <link href="http://sunhao.win/2017/04/14/linux-fifo/"/>
    <id>http://sunhao.win/2017/04/14/linux-fifo/</id>
    <published>2017-04-14T08:19:55.000Z</published>
    <updated>2017-04-14T08:19:55.343Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux-mknod</title>
    <link href="http://sunhao.win/2017/04/14/linux-mknod/"/>
    <id>http://sunhao.win/2017/04/14/linux-mknod/</id>
    <published>2017-04-14T05:56:26.000Z</published>
    <updated>2017-04-14T06:09:51.248Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#将其中的1,3这样的数字记录下来，这表示主设备号和次设备号（一般来说主设备号用来区分设备的种类；次设备号则是为了作唯一性区分，标明不同属性——注意，在unix系统中是把设备也当作文件来对待的），在redhat 9下，ls加不加-L参数都无所谓，但是在Solaris下则一定要加上才可以显示</div><div class="line">[root@localhost test1]# ls -lL /dev/null </div><div class="line">crw-rw-rw- 1 root root 1, 3 8月  18 21:56 /dev/null</div><div class="line"></div><div class="line">[root@localhost test1]# mknod /dev/hda3 b 3 7    #创建一个区块</div><div class="line"></div><div class="line">[root@localhost test1]# ls -al /dev/hda3         #查看</div><div class="line">brw-r--r-- 1 root root 3, 7 8月  21 11:01 /dev/hda3</div></pre></td></tr></table></figure>
<ol>
<li><p>mknod命令用于创建Linux中的字符设备文件和块设备文件。</p>
</li>
<li><p>首先要明白什么是设备文件，简单的我们说 操作系统与外部设备（入磁盘驱动器，打印机，modern，终端 等等）都是通过设备文件来进行通信 的，在Unix/Linux系统与外部设备通讯之前，这个设备必须首先要有一个设备文件，设备文件均放在/dev目录下。一般情况下在安装系统的时候系统自动创建了很多已检测到的设备的设备文件，但有时候我们也需要自己手动创建，命令行生成设备文件的方式有 insf，mksf，mknod等等</p>
</li>
<li><p>根据mknod命令的使用参数来看【mknod Name { b | c } Major Minor 】，使用mknod之前，至少要明白以下几点：<br>设备文件类型：分为块设备和字符设备。ls -l /dev 结果显示第一个字段有b<strong><em> 和 c*</em></strong>，这里即标识了块设备和字符设备。<br>字符设备文件—-字符设备文件传送数据给设备的时候，一次传送一个字符，终端，打印机，绘图仪，modern等设备都经过字符设备文件传送数据<br>块设备—系统通过块设备文件存取一个设备的时候，先从内存中的buffer中读或写数据，而不是直接传送数据到物理磁盘，这种方式能有效的提高磁盘和CD-ROMS的I/O性能。磁盘和CD-ROMS即可以使用字符设备文件也可使用块设备文件。</p>
</li>
<li><p>来看看mknod 命令，如果该设备文件你想放在一个特定的文件夹下当然就先创建文件夹<br>mknod 设备文件名[/dev/xyz]  b/c  主号  次号</p>
</li>
</ol>
<a id="more"></a>
<p>Linux对设备管理是以文件管理的形式进行的，各种设备都以文件的形式存放在/dev目录 下，称为设备文件。应用程序可以打开、关闭和读写这些设备文件，完成对设备的操作，就像操作普通的数据文件一样。为了管理这些设备，系统为设备编了号，每 个设备号又分为主设备号和次设备号。主设备号用来区分不同种类的设备，而次设备号用来区分同一类型的多个设备。<br>    Linux为所有的设备文件都提供了统一的操作函数接口，此函数结构使用数据结构struct file_operations。这个数据结构中包括许多操作函数的指针，如open()、close()、read()和write()等，但由于外设 的种类较多，操作方式各不相同。Struct file_operations结构体中的成员为一系列的接口函数，如用于读/写的read/write函数和用于控制的ioctl等。打开一个文件就是 调用这个文件file_operations中的open操作。不同类型的文件有不同的file_operations成员函数，如普通的磁盘数据文件， 接口函数完成磁盘数据块读写操作；而对于各种设备文件，则最终调用各自驱动程序中的I/O函数进行具体设备的操作。这样，应用程序根本不必考虑操作的是设 备还是普通文件，可一律当作文件处理，具有非常清晰统一的I/O接口。所以file_operations是文件层次的I/O接口。</p>
<p>   linux中可以通过mknod命令创建一个设备，具体的使用方法如下</p>
<p>  mknod 的标准形式为:       mknod DEVNAME {b | c}  MAJOR  MINOR</p>
<p>1、DEVNAME是要创建的设备文件名，如果想将设备文件放在一个特定的文件夹下，就需要先用mkdir在dev目录下新建一个目录；</p>
<p>2、 b和c 分别表示块设备和字符设备：</p>
<pre><code>b表示系统从块设备中读取数据的时候，直接从内存的buffer中读取数据，而不经过磁盘； 

c表示字符设备文件与设备传送数据的时候是以字符的形式传送，一次传送一个字符，比如打印机、终端都是以字符的形式传送数据；
</code></pre><p>3、MAJOR和MINOR分别表示主设备号和次设备号：</p>
<pre><code>为了管理设备，系统为每个设备分配一个编号，一个设备号由主设备号和次设备号组成。主设备号标示某一种类的设备，次设备号用来区分同一类型的设备。linux操作系统中为设备文件编号分配了32位无符号整数，其中前12位是主设备号，后20位为次设备号，所以在向系统申请设备文件时主设备号不好超过4095，次设备号不好超过2^20 -1。
</code></pre><p>用法：mknod [选项]… 名称 类型 [主设备号 次设备号]<br>创建指定类型和名称的特殊文件。</p>
<p>长选项必须使用的参数对于短选项时也是必需使用的。<br>  -m, –mode=模式       设置权限模式(类似chmod)，而不是rwxrwxrwx 减umask<br>  -Z, –context=CTX     将对应名称文件的SELinux 安全环境设置为CTX<br>  –help        显示此帮助信息并退出<br>  –version        显示版本信息并退出</p>
<p>当类型为”p”时可不指定主设备号和次设备号，否则它们是必须指定的。<br>如果主设备号和次设备号以”0x”或”0X”开头，它们会被视作十六进制数来<br>解析；如果以”0”开头，则被视作八进制数；其余情况下被视作十进制数。<br>可用的类型包括：</p>
<p>  b      创建(有缓冲的)区块特殊文件<br>  c, u   创建(没有缓冲的)字符特殊文件,虚拟设备<br>  p      创建先进先出(FIFO)特殊文件</p>
<p>注意：您的shell 内含自己的mknod 程序版本，它会覆盖这里所提及的相应<br>版本。请查阅您的shell 文档获知它所支持的选项。</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#将其中的1,3这样的数字记录下来，这表示主设备号和次设备号（一般来说主设备号用来区分设备的种类；次设备号则是为了作唯一性区分，标明不同属性——注意，在unix系统中是把设备也当作文件来对待的），在redhat 9下，ls加不加-L参数都无所谓，但是在Solaris下则一定要加上才可以显示&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost test1]# ls -lL /dev/null &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;crw-rw-rw- 1 root root 1, 3 8月  18 21:56 /dev/null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost test1]# mknod /dev/hda3 b 3 7    #创建一个区块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@localhost test1]# ls -al /dev/hda3         #查看&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;brw-r--r-- 1 root root 3, 7 8月  21 11:01 /dev/hda3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;mknod命令用于创建Linux中的字符设备文件和块设备文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先要明白什么是设备文件，简单的我们说 操作系统与外部设备（入磁盘驱动器，打印机，modern，终端 等等）都是通过设备文件来进行通信 的，在Unix/Linux系统与外部设备通讯之前，这个设备必须首先要有一个设备文件，设备文件均放在/dev目录下。一般情况下在安装系统的时候系统自动创建了很多已检测到的设备的设备文件，但有时候我们也需要自己手动创建，命令行生成设备文件的方式有 insf，mksf，mknod等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据mknod命令的使用参数来看【mknod Name { b | c } Major Minor 】，使用mknod之前，至少要明白以下几点：&lt;br&gt;设备文件类型：分为块设备和字符设备。ls -l /dev 结果显示第一个字段有b&lt;strong&gt;&lt;em&gt; 和 c*&lt;/em&gt;&lt;/strong&gt;，这里即标识了块设备和字符设备。&lt;br&gt;字符设备文件—-字符设备文件传送数据给设备的时候，一次传送一个字符，终端，打印机，绘图仪，modern等设备都经过字符设备文件传送数据&lt;br&gt;块设备—系统通过块设备文件存取一个设备的时候，先从内存中的buffer中读或写数据，而不是直接传送数据到物理磁盘，这种方式能有效的提高磁盘和CD-ROMS的I/O性能。磁盘和CD-ROMS即可以使用字符设备文件也可使用块设备文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来看看mknod 命令，如果该设备文件你想放在一个特定的文件夹下当然就先创建文件夹&lt;br&gt;mknod 设备文件名[/dev/xyz]  b/c  主号  次号&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux" scheme="http://sunhao.win/tags/linux/"/>
    
      <category term="mknod" scheme="http://sunhao.win/tags/mknod/"/>
    
  </entry>
  
  <entry>
    <title>html5-prefech加速prerender预渲染</title>
    <link href="http://sunhao.win/2017/04/14/html5-prefetch/"/>
    <id>http://sunhao.win/2017/04/14/html5-prefetch/</id>
    <published>2017-04-14T02:20:03.000Z</published>
    <updated>2017-04-14T05:55:26.983Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>DNS Prefetching</li>
</ol>
<p>现代浏览器当遇到DNS解析时已经十分聪明——用户在跟随某个链接之前，浏览器先尝试解析域名再将其进行缓存。</p>
<pre><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//fonts.googleapis.com&quot;&gt;  
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//google-analytics.com&quot;&gt;  
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//www.google-    analytics.com&quot;&gt;  
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//platform.twitter.com&quot;&gt;
</code></pre><a id="more"></a>  
<ol>
<li>Link Prefetching</li>
</ol>
<p>Link Prefetching特性允许开发者在页面加载的时候预先加载他们希望指定的页面或元素。代码如下：</p>
<pre><code>&lt;link rel=&quot;prefetch&quot; href=&quot;http://daker.me/2013/05/hello-world.html&quot; /&gt;  
&lt;link rel=&quot;prefetch&quot; href=&quot;http://daker.me/assets/images/avatar.png&quot; /&gt; 
</code></pre><p>你也能够使用prerendering特性令你的网站速度更快，浏览器能够在后台获取并渲染整个页面，用户点击相应链接时再为用户展示该页面。代码如下：</p>
<pre><code>&lt;link rel=&quot;prerender&quot; href=&quot;http://daker.me/2013/05/hello-world.html&quot; /&gt;  
</code></pre><ol>
<li>Download属性</li>
</ol>
<p>凭借HTML5的Download属性，开发者可以不必到特定页面下载文件，而是直接进行下载。这一操作不必依赖服务器端代码便能够执行。代码如下：</p>
<pre><code>&lt;a href=&quot;download_pdf.php?id=15&quot; download=&quot;myfile.pdf&quot;&gt;Download PDF&lt;/a&gt;  
</code></pre><ol>
<li>Regular Expressions</li>
</ol>
<p>一旦用户输入一个有效的email或URL地址，pattern属性可以令你直接使用regular expressions而无需检查JS或服务器端代码。代码如下：</p>
<pre><code>&lt;input type=&quot;email&quot; pattern=&quot;[^ @]*@[^ @]*&quot; value=&quot;&quot;&gt;  
</code></pre><ol>
<li>Datalist元素</li>
</ol>
<p>若使用jQuery插件执行自动填充输入操作，则用户每敲击一次键盘都要访问服务器端代码以及数据库。但有了Datalist元素，开发者不必再使用jQuery插件便可完成该操作。代码如下：</p>
<pre><code>&lt;form action=&quot;form.php&quot; method=&quot;post&quot;&gt;  
    &lt;input list=&quot;cars&quot; name=&quot;cars&quot; &gt;  
    &lt;datalist id=&quot;cars&quot;&gt;  
        &lt;option value=&quot;Volvo&quot;&gt;  
        &lt;option value=&quot;BMW&quot;&gt;  
        &lt;option value=&quot;Bugatti&quot;&gt;  
        &lt;option value=&quot;Cadillac&quot;&gt;  
        &lt;option value=&quot;Chevrolet&quot;&gt;  
        &lt;option value=&quot;Chrysler&quot;&gt;  
    &lt;/datalist&gt;  
    &lt;input type=&quot;submit&quot; /&gt;  
&lt;/form&gt;  
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;DNS Prefetching&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现代浏览器当遇到DNS解析时已经十分聪明——用户在跟随某个链接之前，浏览器先尝试解析域名再将其进行缓存。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//fonts.googleapis.com&amp;quot;&amp;gt;  
&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//google-analytics.com&amp;quot;&amp;gt;  
&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//www.google-    analytics.com&amp;quot;&amp;gt;  
&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//platform.twitter.com&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="html5" scheme="http://sunhao.win/categories/html5/"/>
    
    
      <category term="dns" scheme="http://sunhao.win/tags/dns/"/>
    
      <category term="seo" scheme="http://sunhao.win/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>linux-kill</title>
    <link href="http://sunhao.win/2017/04/11/linux-kill/"/>
    <id>http://sunhao.win/2017/04/11/linux-kill/</id>
    <published>2017-04-11T01:43:32.000Z</published>
    <updated>2017-04-11T10:12:24.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h2><p>ctrl+a 行首</p>
<p>ctrl+e 行尾</p>
<p>ctrl+u  删除</p>
<p>ctrl+l  清除屏幕</p>
<p>ctrl+z  加入到后台</p>
<p>ctrl+r  历史记录</p>
<p>linux 把top放入后台 ctrl+z<br>或者top&amp;  放入后台<br>&amp;还有含义  就是 1 2 输出</p>
<p>如果要关闭 </p>
<p>先ps</p>
<p>看到pid号后</p>
<p>kill  -9  pid号<br><a id="more"></a></p>
<p>错误输出<br>2&gt;&gt;</p>
<p>2&gt;&amp;1 是将标准出错重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。最后一个&amp; ， 是让该命令在后台执行。</p>
<p>； 多命令</p>
<p>ls /etc/ | grep [^b].* |wc</p>
<p>$a=1</p>
<p>$取值运算<br>set -u 未声明变量会提示<br>unset 删除变量</p>
<p>export x 设置全局变量</p>
<p>locate  定位<br>locale 位置</p>
<p>locale -a 显示支持的所有</p>
<p>df -h 磁盘信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些快捷键&quot;&gt;&lt;a href=&quot;#一些快捷键&quot; class=&quot;headerlink&quot; title=&quot;一些快捷键&quot;&gt;&lt;/a&gt;一些快捷键&lt;/h2&gt;&lt;p&gt;ctrl+a 行首&lt;/p&gt;
&lt;p&gt;ctrl+e 行尾&lt;/p&gt;
&lt;p&gt;ctrl+u  删除&lt;/p&gt;
&lt;p&gt;ctrl+l  清除屏幕&lt;/p&gt;
&lt;p&gt;ctrl+z  加入到后台&lt;/p&gt;
&lt;p&gt;ctrl+r  历史记录&lt;/p&gt;
&lt;p&gt;linux 把top放入后台 ctrl+z&lt;br&gt;或者top&amp;amp;  放入后台&lt;br&gt;&amp;amp;还有含义  就是 1 2 输出&lt;/p&gt;
&lt;p&gt;如果要关闭 &lt;/p&gt;
&lt;p&gt;先ps&lt;/p&gt;
&lt;p&gt;看到pid号后&lt;/p&gt;
&lt;p&gt;kill  -9  pid号&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux" scheme="http://sunhao.win/tags/linux/"/>
    
      <category term="kill" scheme="http://sunhao.win/tags/kill/"/>
    
  </entry>
  
  <entry>
    <title>linux点命令执行linux.命令</title>
    <link href="http://sunhao.win/2017/04/01/linux-shell-dot/"/>
    <id>http://sunhao.win/2017/04/01/linux-shell-dot/</id>
    <published>2017-04-01T01:07:54.000Z</published>
    <updated>2017-04-01T07:27:41.099Z</updated>
    
    <content type="html"><![CDATA[<p>.: . filename [arguments]<br>   . 文件名 [参数]</p>
<pre><code>Execute commands from a file in the current shell.
在当前的shell脚本中加载一个文件执行里面的命令.

Read and execute commands from FILENAME in the current shell.  The
在当前的shell脚本中加载一个文件读取和执行里面的命令.

entries in $PATH are used to find the directory containing FILENAME.
$PATH环境变量用于查找文件目录

If any ARGUMENTS are supplied, they become the positional parameters
when FILENAME is executed.
如果有形参，文件在被执行的时候实参就会传过去。
ps:(parameter=形参(formal parameter)， argument=实参(actual parameter)。)

Exit Status:
退出状态:

Returns the status of the last command executed in FILENAME; fails if
FILENAME cannot be read.
返回文件最后执行的命令的状态；如果无法读取文件返回失败。
</code></pre><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &apos;ls -a&apos;&gt;&gt;myLS</div><div class="line">. myLS</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.: . filename [arguments]&lt;br&gt;   . 文件名 [参数]&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Execute commands from a file in the current shell.
在当前的shell脚本中加载一个文件执行里面的命令.

Read and execute commands from FILENAME in the current shell.  The
在当前的shell脚本中加载一个文件读取和执行里面的命令.

entries in $PATH are used to find the directory containing FILENAME.
$PATH环境变量用于查找文件目录

If any ARGUMENTS are supplied, they become the positional parameters
when FILENAME is executed.
如果有形参，文件在被执行的时候实参就会传过去。
ps:(parameter=形参(formal parameter)， argument=实参(actual parameter)。)

Exit Status:
退出状态:

Returns the status of the last command executed in FILENAME; fails if
FILENAME cannot be read.
返回文件最后执行的命令的状态；如果无法读取文件返回失败。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="linux" scheme="http://sunhao.win/categories/linux/"/>
    
    
      <category term="linux.命令" scheme="http://sunhao.win/tags/linux-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>vmware-nonet</title>
    <link href="http://sunhao.win/2017/03/17/vmware-nonet/"/>
    <id>http://sunhao.win/2017/03/17/vmware-nonet/</id>
    <published>2017-03-17T08:19:47.000Z</published>
    <updated>2017-03-17T09:45:35.707Z</updated>
    
    <content type="html"><![CDATA[<pre><code>很多小伙伴，在配置完虚拟机后，发现无法正常上网，这是为什么呢？
导致这个原因大部分是因为，我们的电脑有多个网卡，而我们设置的桥接方式是自动配置的，无法正确识别，主网卡。
这个时候我们可以通过 虚拟网络编辑器 编辑网桥 指定网卡就可以。
</code></pre><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;很多小伙伴，在配置完虚拟机后，发现无法正常上网，这是为什么呢？
导致这个原因大部分是因为，我们的电脑有多个网卡，而我们设置的桥接方式是自动配置的，无法正确识别，主网卡。
这个时候我们可以通过 虚拟网络编辑器 编辑网桥 指定网卡就可以。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="vmware" scheme="http://sunhao.win/categories/vmware/"/>
    
    
      <category term="vmware" scheme="http://sunhao.win/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>git fork和clone区别，fetch与pull区别</title>
    <link href="http://sunhao.win/2017/03/10/git-fork-clone-fetch-pull/"/>
    <id>http://sunhao.win/2017/03/10/git-fork-clone-fetch-pull/</id>
    <published>2017-03-10T03:19:28.000Z</published>
    <updated>2017-03-10T03:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>fork：github中，克隆别人仓库的项目到自己的仓库<br>clone：克隆github或者其他远程 git服务器仓库的项目到自己的 本地<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fork：github中，克隆别人仓库的项目到自己的仓库&lt;br&gt;clone：克隆github或者其他远程 git服务器仓库的项目到自己的 本地&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://sunhao.win/categories/git/"/>
    
    
      <category term="fork" scheme="http://sunhao.win/tags/fork/"/>
    
      <category term="clone" scheme="http://sunhao.win/tags/clone/"/>
    
      <category term="fetch" scheme="http://sunhao.win/tags/fetch/"/>
    
      <category term="pull" scheme="http://sunhao.win/tags/pull/"/>
    
  </entry>
  
  <entry>
    <title>apache配置</title>
    <link href="http://sunhao.win/2017/03/09/apache-config/"/>
    <id>http://sunhao.win/2017/03/09/apache-config/</id>
    <published>2017-03-09T00:31:00.000Z</published>
    <updated>2017-03-09T02:53:39.665Z</updated>
    
    <content type="html"><![CDATA[<p>优雅重启<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/apachectl graceful</div></pre></td></tr></table></figure></p>
<p>vhost配置路径<br>/usr/local/apache2/etc/extra</p>
<p>httpd配置路径<br>/usr/local/apache2/etc<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优雅重启&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/usr/local/apache2/bin/apachectl graceful&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;vhost配置路径&lt;br&gt;/usr/local/apache2/etc/extra&lt;/p&gt;
&lt;p&gt;httpd配置路径&lt;br&gt;/usr/local/apache2/etc&lt;br&gt;
    
    </summary>
    
      <category term="apache" scheme="http://sunhao.win/categories/apache/"/>
    
    
      <category term="apache" scheme="http://sunhao.win/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>php函数参数类和接口</title>
    <link href="http://sunhao.win/2017/03/07/php-class-type-declaration/"/>
    <id>http://sunhao.win/2017/03/07/php-class-type-declaration/</id>
    <published>2017-03-07T05:46:37.000Z</published>
    <updated>2017-03-07T06:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>参数为类的实例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// This doesn't extend C.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(C $c)</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> get_class($c).<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(<span class="keyword">new</span> C);</div><div class="line">f(<span class="keyword">new</span> D);</div><div class="line">f(<span class="keyword">new</span> E);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>输出为</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">C</div><div class="line">D</div><div class="line"></div><div class="line">Fatal error: Uncaught TypeError: Argument <span class="number">1</span> passed to f() must be an instance of C, instance of E given, called in - on line <span class="number">14</span> <span class="keyword">and</span> defined in -:<span class="number">8</span></div><div class="line">Stack trace:</div><div class="line"><span class="comment">#0 -(14): f(Object(E))</span></div><div class="line"><span class="comment">#1 &#123;main&#125;</span></div><div class="line">  thrown in - on line <span class="number">8</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>参数为接口的实现</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I</span> </span>&#123; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">I</span> </span>&#123; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125; &#125;</div><div class="line"></div><div class="line"><span class="comment">// This doesn't implement I.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(I $i)</span> </span>&#123;</div><div class="line">    <span class="keyword">echo</span> get_class($i).<span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(<span class="keyword">new</span> C);</div><div class="line">f(<span class="keyword">new</span> E);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">C</div><div class="line">PHP Catchable fatal error:  Argument <span class="number">1</span> passed to f() must implement <span class="class"><span class="keyword">interface</span> <span class="title">I</span>, <span class="title">instance</span> <span class="title">of</span> <span class="title">E</span> <span class="title">given</span>, <span class="title">called</span> <span class="title">in</span> /<span class="title">code</span>/<span class="title">main</span>.<span class="title">php</span> <span class="title">on</span> <span class="title">line</span> 13 <span class="title">and</span> <span class="title">defined</span> <span class="title">in</span> /<span class="title">code</span>/<span class="title">main</span>.<span class="title">php</span> <span class="title">on</span> <span class="title">line</span> 8</span></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参数为类的实例&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This doesn&#39;t extend C.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;E&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(C $c)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; get_class($c).&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; C);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; D);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; E);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出为&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;D&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fatal error: Uncaught TypeError: Argument &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; passed to f() must be an instance of C, instance of E given, called in - on line &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; defined in -:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Stack trace:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#0 -(14): f(Object(E))&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1 &amp;#123;main&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  thrown in - on line &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="php" scheme="http://sunhao.win/categories/php/"/>
    
    
      <category term="php参数" scheme="http://sunhao.win/tags/php%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack热拔插教程hmr</title>
    <link href="http://sunhao.win/2017/03/07/webpack-hmr-tutorial/"/>
    <id>http://sunhao.win/2017/03/07/webpack-hmr-tutorial/</id>
    <published>2017-03-07T00:50:58.000Z</published>
    <updated>2017-03-07T06:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://andrewhfarmer.com/webpack-hmr-tutorial/" target="_blank" rel="external">http://andrewhfarmer.com/webpack-hmr-tutorial/</a><br>Struggling to set up HMR with Webpack?</p>
<p>Are you finding the Webpack documentation to be lacking - particularly in the HMR section? Does it seem like they’ve left out some important parts?</p>
<p>If so, read on! We’ll fill in the gaps together.</p>
<p>By the way, HMR stands for ‘Hot Module Replacement’, sometimes called ‘hot module swapping’. It’s a Webpack feature that updates your JavaScript in-place without a browser refresh - whenever you make code changes. I love it because it enables a very fast developer workflow.<br>HMR Myths<br>First let’s get a couple myths about HMR out of the way.<br><a id="more"></a><br>Myth: HMR is only for React<br>Not true - it usually just takes 3 lines of code to enable HMR in arbitrary JavaScript. This Tutorial doesn’t even mention React - I’ll cover HMR in React in a subsequent post.</p>
<p>Myth: HMR is only for ‘advanced’ users<br>Not true. Without good documentation, HMR is difficult for beginners and advanced users alike. With the right information (this article), HMR can be enabled with very minor changes to config/code.</p>
<p>Myth: HMR is the same as ‘live reload’<br>Not true. Live reload is when the browser automatically refreshes the page whenever you make a code change. HMR is faster because it updates code in-place without refreshing.</p>
<p>2 Steps to HMR Success<br>There are 2 steps to enabling HMR: config changes and code changes.</p>
<ol>
<li><p>Config / Project Setup<br>There are 3 ways to configure your project for HMR. I go into each way in detail in Part 1. Pick the way that’s right for you and either use the provided github repository, or follow the directions to adapt your existing code base.</p>
</li>
<li><p>JavaScript / HMR API<br>To get HMR to work you have to add a little bit of extra code to your JavaScript. In the simplest case this is just 3 lines of code. I’ll show you everything you need to add for your use-case in Part 2.</p>
</li>
</ol>
<p>Part 1: Configuring Your Project<br>There are exactly 3 ways that you can configure your HMR project. Let’s go through each one. I’ll help you pick which one to use in the next section.</p>
<ol>
<li><p>webpack-dev-server CLI<br>Run the webpack-dev-server on the command-line. With this approach you don’t need to change your webpack.config.js file, so it’s the simplest.</p>
</li>
<li><p>webpack-dev-server API<br>Run WebpackDevServer from a node.js script. Requires some additions to your webpack.config.js.</p>
</li>
<li><p>webpack-hot-middleware w/ express<br>webpack-hot-middleware is used for running a webpack dev server with HMR inside an express server.</p>
</li>
</ol>
<p>The Non-Way<br>If you are used to running the webpack CLI or the Webpack API (without express or webpack-dev-server), then you’ll have to change how you do things a little bit. HMR requires a server to work. To find out why, read my understanding HMR post.</p>
<p>But how do I choose?<br>Follow this simple guide to pick one of the 3 ways above.</p>
<p>If you are using a task runner like grunt or gulp you’ll want to use the webpack-dev-server API. You can run the server from one of your gulp/grunt tasks.</p>
<p>If you use your own node scripts to run webpack, you’ll also want to use the webpack-dev-server API.</p>
<p>If you use express to host your site: use webpack-hot-middleware. It will be integrated with your express server, so you won’t have to run another server for your bundled JS.</p>
<p>If none of the above apply to you or you just want the simplest possible setup: use the webpack-dev-server CLI. It requires no configuration.</p>
<p>Okay, I picked one, but how do I start?<br>Glad you asked! Below is a separate ‘Configuring X’ section for each of the 3 approaches.</p>
<p>Scroll forward to the approach you decided to use, follow the directions, and then scroll down to Part 2.</p>
<ol>
<li>Configuring webpack-dev-server CLI<br>Read this section if you’ve decided to use the webpack-dev-server CLI. Otherwise, scroll to the next section.</li>
</ol>
<p>If you are starting a new project, use my webpack HMR with webpack-dev-server CLI starter project (wow that’s a mouthful). It has a README and lots of comments to explain what’s going on.</p>
<p>If you are working with an existing project: just make sure you have a valid webpack.config.js and run webpack-dev-server.</p>
<p>Here’s an example command:</p>
<p>webpack-dev-server –content-base=www –inline –watch –hot<br>You may want to modify the above command for your use-case based on the CLI Docs.</p>
<p>That’s it! When you use the webpack-dev-server CLI it does all the configuration for you.</p>
<p>Gotcha: When using this approach, make sure your webpack.config.js does NOT contain any references to webpack-dev-server or HotModuleReplacementPlugin. You’ll get errors if you do.</p>
<ol>
<li>Configuring WebpackDevServer API<br>Read this section if you’ve decided to use the WebpackDevServer API. Otherwise, scroll to the next section.</li>
</ol>
<p>If you are starting a new project, use my webpack HMR with WebpackDevServer API starter project. It has a README and lots of comments to explain what’s going on.</p>
<p>If you are working with an existing project, you’ll have to make 3 changes:</p>
<p>Change #1: Add entry points to your webpack.config.js. Here’s an example. You need webpack/hot/dev-server and webpack-dev-server/client as shown, but index.js should be the name of your usual entry point.</p>
<p>entry: [<br>  ‘./index.js’,<br>  ‘webpack/hot/dev-server’,<br>  ‘webpack-dev-server/client?<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>‘,<br>],<br>Change #2: Add the HotModuleReplacementPlugin to your your webpack.config.js, like this:</p>
<p>plugins: [<br>  new webpack.HotModuleReplacementPlugin(),<br>]<br>For a complete example, see the starter project webpack.config.js.</p>
<p>Change #3: Run WebpackDevServer with the hot: true option. For an example, see the starter project server.js.</p>
<ol>
<li>Configuring webpack-hot-middleware &amp; express<br>Read this section if you’ve decided to use express and webpack-hot-middleware. Otherwise, scroll on to Part 2.</li>
</ol>
<p>If you are starting a new project, use my webpack HMR with webpack-hot-middleware &amp; express starter project. It has a README and lots of comments to explain what’s going on.</p>
<p>If you are working with an existing express project, you’ll need to do 3 things:</p>
<p>Change #1: Install webpack-hot-middleware and webpack-dev-middleware. I’m assuming you already have webpack and express.</p>
<p>npm install –save-dev webpack-hot-middleware webpack-dev-middleware<br>Change #2: Adjust your webpack.config.js to look similar to this. The important bits are the entry and plugins section. You’ll want all the plugins I have listed:</p>
<p>var path = require(‘path’);<br>var webpack = require(‘webpack’);</p>
<p>var config = {<br>  context: path.join(<strong>dirname, ‘js’),<br>  entry: [<br>    ‘webpack-hot-middleware/client?path=/</strong>webpack_hmr&amp;timeout=20000’,<br>    ‘./index.js’,<br>  ],<br>  output: {<br>    path: path.join(__dirname, ‘www’),<br>    filename: ‘bundle.js’,<br>    publicPath: ‘/assets/‘,<br>  },<br>  plugins: [<br>    new webpack.optimize.OccurenceOrderPlugin(),<br>    new webpack.HotModuleReplacementPlugin(),<br>    new webpack.NoErrorsPlugin()<br>  ]<br>};<br>module.exports = config;<br>Change #3: Add the middleware to your express server.</p>
<p>Add these requires:</p>
<p>var webpackDevMiddleware = require(“webpack-dev-middleware”);<br>var webpackHotMiddleware = require(“webpack-hot-middleware”);<br>And these middleware .use statements:</p>
<p>app.use(webpackDevMiddleware(compiler, {<br>  hot: true,<br>  filename: ‘bundle.js’,<br>  publicPath: ‘/assets/‘,<br>  stats: {<br>    colors: true,<br>  },<br>  historyApiFallback: true,<br>}));</p>
<p>app.use(webpackHotMiddleware(compiler, {<br>  log: console.log,<br>  path: ‘/__webpack_hmr’,<br>  heartbeat: 10 * 1000,<br>}));<br>Part 2: Code Changes<br>Your Webpack project should now be configured for HMR. But if you fire up a browser at this point and make a code change, it won’t work. Either you won’t see the update, or you’ll get a full browser refresh.</p>
<p>Why isn’t it working yet? Webpack doesn’t know when it is acceptable to reload a particular JS file.</p>
<p>To let Webpack know which files can be updated, we’ll use the HMR JavaScript API a.k.a. the module.hot API.</p>
<p>If you used any of my github starter projects, they are already using the module.hot API and you will see changes reflected immediately.<br>The Simple Way<br>To start, find your entry point (often called index.js or main.js) and add the following to the end:</p>
<p>if (module.hot) {<br>  module.hot.accept();<br>}<br>This tells Webpack that this file and all of its dependencies can be replaced.</p>
<p>Now make a code change that you could see the effect of onscreen. You SHOULD have seen an update!</p>
<p>For many projects, that’s all there is to it.</p>
<p>The Catch: Side Effects<br>If any of your files produce side effects when they run, for instance if they add elements to the DOM, then you’ll need to use module.hot.dispose to dispose of those side effects.</p>
<p>Why? If you don’t, when Webpack reloads the module, all the side effects will be repeated.</p>
<p>Here’s an example, box-creator.js:</p>
<p>var sideEffectNode = document.createElement(‘div’);<br>sideEffectNode.textContent = ‘Side Effect’;<br>document.body.appendChild(sideEffectNode);</p>
<p>// Remove the most recently-added <div> so that when the code runs again and<br>// adds a new <div>, we don’t end up with duplicate divs.<br>if (module.hot) {<br>  module.hot.dispose(function() {<br>    sideEffectNode.parentNode.removeChild(sideEffectNode);<br>  });<br>}<br>This is a file that simply adds a <div> to the DOM whenever it is loaded. It uses module.hot.dispose to remove the <div> when it is unloaded by the Webpack HMR Runtime.</div></div></div></div></p>
<p>Conclusion<br>That’s all you need to know to get HMR working. If you want to dig deeper to solidify your understanding, read my article on understanding HMR.</p>
<p>Coming soon: next I’ll post about how to apply HMR to your React project. Sign up for my list to be notified when that comes out!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://andrewhfarmer.com/webpack-hmr-tutorial/&quot;&gt;http://andrewhfarmer.com/webpack-hmr-tutorial/&lt;/a&gt;&lt;br&gt;Struggling to set up HMR with Webpack?&lt;/p&gt;
&lt;p&gt;Are you finding the Webpack documentation to be lacking - particularly in the HMR section? Does it seem like they’ve left out some important parts?&lt;/p&gt;
&lt;p&gt;If so, read on! We’ll fill in the gaps together.&lt;/p&gt;
&lt;p&gt;By the way, HMR stands for ‘Hot Module Replacement’, sometimes called ‘hot module swapping’. It’s a Webpack feature that updates your JavaScript in-place without a browser refresh - whenever you make code changes. I love it because it enables a very fast developer workflow.&lt;br&gt;HMR Myths&lt;br&gt;First let’s get a couple myths about HMR out of the way.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://sunhao.win/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://sunhao.win/tags/webpack/"/>
    
      <category term="hmr" scheme="http://sunhao.win/tags/hmr/"/>
    
      <category term="教程" scheme="http://sunhao.win/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="热拔插" scheme="http://sunhao.win/tags/%E7%83%AD%E6%8B%94%E6%8F%92/"/>
    
  </entry>
  
  <entry>
    <title>laravel学习零散知识点</title>
    <link href="http://sunhao.win/2017/03/06/laravel-study/"/>
    <id>http://sunhao.win/2017/03/06/laravel-study/</id>
    <published>2017-03-06T08:22:41.000Z</published>
    <updated>2017-03-23T06:00:19.210Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;?php<br>$firstname = “Bill”;<br>$lastname = “Gates”;<br>$age = “60”;</p>
<p>$result = compact(“firstname”, “lastname”, “age”);</p>
<p>print_r($result);<br>?&gt;<br>compact 紧凑的</p>
<p>动人的; 雄辩的，有口才的; 有说明力的; 富于表情的，逼真的;<br>eloquent<br>英文发音：[‘lærəvel]</p>
<p>作者 Taylor Otwell </p>
<p>In Narnia, Cair Paravel is the name of the castle where the kings and queens of Narnia live. Laravel rhymes with Paravel. I thought the name had a classy and sophisticated ring to it.— Taylor Otwell —</p>
<p>Laravel这个名字来自于纳尼亚传奇中的Cair Paravel城堡。Laravel 和Paravel 的发音相似，Taylor认为Laravel这个名字韵味深长而又优雅，所以命名为Laravel。<br>Cair Paravel 中的Paravel发音为[‘pærəvel] 推断Laravel发音取[‘lærəvel]</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;!! !!&#125; 相当于 <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $value; <span class="meta">?&gt;</span></div><div class="line">&#123;&#123; &#125;&#125; 相当于 <span class="meta">&lt;?php</span> <span class="keyword">echo</span> htmlspecialchars($value); <span class="meta">?&gt;</span></div><div class="line"></div><div class="line">csrf_field()</div><div class="line"></div><div class="line">csrf_field 函数生成一个包含 CSRF 令牌值的 HTML 隐藏域，例如，使用Blade语法示例如下：</div><div class="line"></div><div class="line">&#123;!! csrf_field() !!&#125;</div><div class="line">&#123;&#123;&#123;&#125;&#125;&#125; 完全转换html</div><div class="line">@<span class="keyword">if</span>()</div><div class="line"></div><div class="line">@<span class="keyword">else</span></div><div class="line">        ss</div><div class="line">@<span class="keyword">endif</span></div><div class="line"></div><div class="line">@<span class="keyword">foreach</span>()</div><div class="line"></div><div class="line">@<span class="keyword">endforeach</span></div><div class="line">@<span class="keyword">for</span></div><div class="line">@<span class="keyword">endfor</span></div><div class="line">@<span class="keyword">while</span></div><div class="line">@<span class="keyword">endwhile</span></div><div class="line">csrf_token()</div><div class="line"></div><div class="line">csrf_token 函数获取当前 CSRF 令牌的值：</div><div class="line"></div><div class="line">$token = csrf_token();</div></pre></td></tr></table></figure>
<p>php artisan make:controller myController<br>php artisan route:list</p>
<p>laravel  collect</p>
<p>laravel  请求  query get has exists<br>has 和exists 的区别  has 判断 是否存在此参数 其此参数不为空<br>检索 only<br>去除 Request::except(‘name’,’age’) 去除<br>url Request::url()  全部 fullUrl()</p>
<p>请求历史 flash flashExcept flashOnly old<br>请求文件 Request::file(‘’profile)-&gt;getSize()<br>getClientOriginalName<br>getClientOriginalExtension<br>session  教程<a href="http://blog.csdn.net/ghost_hell/article/details/53177072" target="_blank" rel="external">http://blog.csdn.net/ghost_hell/article/details/53177072</a><br>Hash::make()</p>
<p>laravel<br>yield 用于定义个内容的片段   里面没有内容   只是内容的片段<br>section 用于定义给定片段的内容   定义了内容  可以多次继承覆盖</p>
<p>服务容器  都是依靠构造函数或者某些情况下通过 setter 方法将类依赖注入到类<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;?php&lt;br&gt;$firstname = “Bill”;&lt;br&gt;$lastname = “Gates”;&lt;br&gt;$age = “60”;&lt;/p&gt;
&lt;p&gt;$result = compact(“firstname”, “lastname”, “age”);&lt;/p&gt;
&lt;p&gt;print_r($result);&lt;br&gt;?&amp;gt;&lt;br&gt;compact 紧凑的&lt;/p&gt;
&lt;p&gt;动人的; 雄辩的，有口才的; 有说明力的; 富于表情的，逼真的;&lt;br&gt;eloquent&lt;br&gt;英文发音：[‘lærəvel]&lt;/p&gt;
&lt;p&gt;作者 Taylor Otwell &lt;/p&gt;
&lt;p&gt;In Narnia, Cair Paravel is the name of the castle where the kings and queens of Narnia live. Laravel rhymes with Paravel. I thought the name had a classy and sophisticated ring to it.— Taylor Otwell —&lt;/p&gt;
&lt;p&gt;Laravel这个名字来自于纳尼亚传奇中的Cair Paravel城堡。Laravel 和Paravel 的发音相似，Taylor认为Laravel这个名字韵味深长而又优雅，所以命名为Laravel。&lt;br&gt;Cair Paravel 中的Paravel发音为[‘pærəvel] 推断Laravel发音取[‘lærəvel]&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;!! !!&amp;#125; 相当于 &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $value; &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&amp;#123; &amp;#125;&amp;#125; 相当于 &lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; htmlspecialchars($value); &lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;csrf_field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;csrf_field 函数生成一个包含 CSRF 令牌值的 HTML 隐藏域，例如，使用Blade语法示例如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;!! csrf_field() !!&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&amp;#123;&amp;#123;&amp;#125;&amp;#125;&amp;#125; 完全转换html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ss&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;endforeach&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;endfor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;endwhile&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;csrf_token()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;csrf_token 函数获取当前 CSRF 令牌的值：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$token = csrf_token();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;php artisan make:controller myController&lt;br&gt;php artisan route:list&lt;/p&gt;
&lt;p&gt;laravel  collect&lt;/p&gt;
&lt;p&gt;laravel  请求  query get has exists&lt;br&gt;has 和exists 的区别  has 判断 是否存在此参数 其此参数不为空&lt;br&gt;检索 only&lt;br&gt;去除 Request::except(‘name’,’age’) 去除&lt;br&gt;url Request::url()  全部 fullUrl()&lt;/p&gt;
&lt;p&gt;请求历史 flash flashExcept flashOnly old&lt;br&gt;请求文件 Request::file(‘’profile)-&amp;gt;getSize()&lt;br&gt;getClientOriginalName&lt;br&gt;getClientOriginalExtension&lt;br&gt;session  教程&lt;a href=&quot;http://blog.csdn.net/ghost_hell/article/details/53177072&quot;&gt;http://blog.csdn.net/ghost_hell/article/details/53177072&lt;/a&gt;&lt;br&gt;Hash::make()&lt;/p&gt;
&lt;p&gt;laravel&lt;br&gt;yield 用于定义个内容的片段   里面没有内容   只是内容的片段&lt;br&gt;section 用于定义给定片段的内容   定义了内容  可以多次继承覆盖&lt;/p&gt;
&lt;p&gt;服务容器  都是依靠构造函数或者某些情况下通过 setter 方法将类依赖注入到类&lt;br&gt;
    
    </summary>
    
      <category term="laravel" scheme="http://sunhao.win/categories/laravel/"/>
    
    
      <category term="学习" scheme="http://sunhao.win/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>git文件状态</title>
    <link href="http://sunhao.win/2017/03/06/git-filestatus/"/>
    <id>http://sunhao.win/2017/03/06/git-filestatus/</id>
    <published>2017-03-06T00:54:46.000Z</published>
    <updated>2017-03-10T07:57:16.672Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170306/085148199.png" alt="mark"><br>灰色箭头不参与git快照。</p>
<ol>
<li>默认git有4种状态</li>
<li>untracked  未跟踪 </li>
<li>unmodified 未修改</li>
<li>modified 修改</li>
<li>staged  暂存区</li>
</ol>
<h3 id="其中我们工作区中只有-未修改-和修改。"><a href="#其中我们工作区中只有-未修改-和修改。" class="headerlink" title="其中我们工作区中只有  未修改 和修改。"></a>其中我们工作区中只有  未修改 和修改。</h3><h3 id="初始化，和commit后-所有为跟踪的文件都是-未修改的。"><a href="#初始化，和commit后-所有为跟踪的文件都是-未修改的。" class="headerlink" title="初始化，和commit后  所有为跟踪的文件都是 未修改的。"></a>初始化，和commit后  所有为跟踪的文件都是 未修改的。</h3><p>运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：<br><a id="more"></a><br>git diff –cached 查看已经暂存起来的变化：<br>git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交</p>
<p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ rm grit.gemspec</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">        deleted:    grit.gemspec</div></pre></td></tr></table></figure>
<p>no changes added to commit (use “git add” and/or “git commit -a”)<br>然后再运行 git rm 记录此次移除文件的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ git rm grit.gemspec</div><div class="line">rm &apos;grit.gemspec&apos;</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">        deleted:    grit.gemspec</div></pre></td></tr></table></figure>
<p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 –cached 选项即可：</p>
<pre><code>$ git rm --cached readme.txt
</code></pre><p>后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：</p>
<pre><code>$ git rm log/\*.log
</code></pre><p>注意到星号 * 之前的反斜杠 \，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：</p>
<pre><code>$ git rm \*~
</code></pre><p>会递归删除当前目录及其子目录中所有 ~ 结尾的文件。</p>
<p>图形化显示分支<br>  git log –pretty=format:”%h %s” –graph</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">选项	说明</div><div class="line">-p	按补丁格式显示每个更新之间的差异。</div><div class="line">--word-diff	按 word diff 格式显示差异。</div><div class="line">--stat	显示每次更新的文件修改统计信息。</div><div class="line">--shortstat	只显示 --stat 中最后的行数修改添加移除统计。</div><div class="line">--name-only	仅在提交信息后显示已修改的文件清单。</div><div class="line">--name-status	显示新增、修改、删除的文件清单。</div><div class="line">--abbrev-commit	仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</div><div class="line">--relative-date	使用较短的相对时间显示（比如，“2 weeks ago”）。</div><div class="line">--graph	显示 ASCII 图形表示的分支合并历史。</div><div class="line">--pretty	使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</div><div class="line">--oneline	`--pretty=oneline --abbrev-commit` 的简化用法。</div></pre></td></tr></table></figure>
<p>提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 –amend 提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -m &apos;initial commit&apos;</div><div class="line">$ git add forgotten_file</div><div class="line">$ git commit --amend</div></pre></td></tr></table></figure></p>
<p>取消对文件的修改<br>$ git checkout – benchmarks.rb</p>
<p>添加远程仓库<br>git remote add [shortname] [url]</p>
<p>从远程仓库抓取数据<br>$ git fetch [remote-name]</p>
<p>默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170306/085148199.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;灰色箭头不参与git快照。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认git有4种状态&lt;/li&gt;
&lt;li&gt;untracked  未跟踪 &lt;/li&gt;
&lt;li&gt;unmodified 未修改&lt;/li&gt;
&lt;li&gt;modified 修改&lt;/li&gt;
&lt;li&gt;staged  暂存区&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;其中我们工作区中只有-未修改-和修改。&quot;&gt;&lt;a href=&quot;#其中我们工作区中只有-未修改-和修改。&quot; class=&quot;headerlink&quot; title=&quot;其中我们工作区中只有  未修改 和修改。&quot;&gt;&lt;/a&gt;其中我们工作区中只有  未修改 和修改。&lt;/h3&gt;&lt;h3 id=&quot;初始化，和commit后-所有为跟踪的文件都是-未修改的。&quot;&gt;&lt;a href=&quot;#初始化，和commit后-所有为跟踪的文件都是-未修改的。&quot; class=&quot;headerlink&quot; title=&quot;初始化，和commit后  所有为跟踪的文件都是 未修改的。&quot;&gt;&lt;/a&gt;初始化，和commit后  所有为跟踪的文件都是 未修改的。&lt;/h3&gt;&lt;p&gt;运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://sunhao.win/categories/git/"/>
    
    
      <category term="git" scheme="http://sunhao.win/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>window命令 端口占用、查杀进制</title>
    <link href="http://sunhao.win/2017/03/05/window-tasklist-taskkill-netstat/"/>
    <id>http://sunhao.win/2017/03/05/window-tasklist-taskkill-netstat/</id>
    <published>2017-03-05T03:15:53.000Z</published>
    <updated>2017-03-12T11:20:32.976Z</updated>
    
    <content type="html"><![CDATA[<p>cmd关闭php的一个示例</p>
<h3 id="首先用php-S-开启一个服务"><a href="#首先用php-S-开启一个服务" class="headerlink" title="首先用php -S 开启一个服务"></a>首先用php -S 开启一个服务</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170312/185351151.png" alt="mark"></p>
<h3 id="另开一个窗口，查询占用了8081端口的进程：netstat-ano-findstr-8081，找到pid为12552"><a href="#另开一个窗口，查询占用了8081端口的进程：netstat-ano-findstr-8081，找到pid为12552" class="headerlink" title="另开一个窗口，查询占用了8081端口的进程：netstat -ano|findstr 8081，找到pid为12552"></a>另开一个窗口，查询占用了8081端口的进程：netstat -ano|findstr 8081，找到pid为12552</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170312/185609267.png" alt="mark"></p>
<h3 id="tasklist-findstr-12552-。发现就是我们的php服务"><a href="#tasklist-findstr-12552-。发现就是我们的php服务" class="headerlink" title="tasklist|findstr 12552 。发现就是我们的php服务"></a>tasklist|findstr 12552 。发现就是我们的php服务</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170312/185736720.png" alt="mark"></p>
<h3 id="taskkill-f-t-im-php-exe"><a href="#taskkill-f-t-im-php-exe" class="headerlink" title="taskkill /f /t /im php.exe"></a>taskkill /f /t /im php.exe</h3><p>/f 强制<br>/t 关闭子进程<br>/im 文件名<br>taskkill /f /PID 12552<br>/PID 删除指定pid<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cmd关闭php的一个示例&lt;/p&gt;
&lt;h3 id=&quot;首先用php-S-开启一个服务&quot;&gt;&lt;a href=&quot;#首先用php-S-开启一个服务&quot; class=&quot;headerlink&quot; title=&quot;首先用php -S 开启一个服务&quot;&gt;&lt;/a&gt;首先用php -S 开启一个服务&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170312/185351151.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;另开一个窗口，查询占用了8081端口的进程：netstat-ano-findstr-8081，找到pid为12552&quot;&gt;&lt;a href=&quot;#另开一个窗口，查询占用了8081端口的进程：netstat-ano-findstr-8081，找到pid为12552&quot; class=&quot;headerlink&quot; title=&quot;另开一个窗口，查询占用了8081端口的进程：netstat -ano|findstr 8081，找到pid为12552&quot;&gt;&lt;/a&gt;另开一个窗口，查询占用了8081端口的进程：netstat -ano|findstr 8081，找到pid为12552&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170312/185609267.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;tasklist-findstr-12552-。发现就是我们的php服务&quot;&gt;&lt;a href=&quot;#tasklist-findstr-12552-。发现就是我们的php服务&quot; class=&quot;headerlink&quot; title=&quot;tasklist|findstr 12552 。发现就是我们的php服务&quot;&gt;&lt;/a&gt;tasklist|findstr 12552 。发现就是我们的php服务&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170312/185736720.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;taskkill-f-t-im-php-exe&quot;&gt;&lt;a href=&quot;#taskkill-f-t-im-php-exe&quot; class=&quot;headerlink&quot; title=&quot;taskkill /f /t /im php.exe&quot;&gt;&lt;/a&gt;taskkill /f /t /im php.exe&lt;/h3&gt;&lt;p&gt;/f 强制&lt;br&gt;/t 关闭子进程&lt;br&gt;/im 文件名&lt;br&gt;taskkill /f /PID 12552&lt;br&gt;/PID 删除指定pid&lt;br&gt;
    
    </summary>
    
      <category term="window" scheme="http://sunhao.win/categories/window/"/>
    
    
      <category term="taskkill" scheme="http://sunhao.win/tags/taskkill/"/>
    
      <category term="tasklist" scheme="http://sunhao.win/tags/tasklist/"/>
    
      <category term="netstat" scheme="http://sunhao.win/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>window命令mklink 创建符号链接 硬链接 目录联结</title>
    <link href="http://sunhao.win/2017/03/05/window-mklink/"/>
    <id>http://sunhao.win/2017/03/05/window-mklink/</id>
    <published>2017-03-05T03:15:53.000Z</published>
    <updated>2017-03-05T05:15:41.894Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究mklink 发现国内很多文档认识有错误  或者不充分，在此补充下。</p>
<ol>
<li>符号链接 用的比较多  也就是我们的快捷方式</li>
<li>硬链接  用的很少  可以防止误删，省空间等、</li>
<li>目录联结   一般用于共享目录<h3 id="链接的本质是创建一个指向原文件的路径"><a href="#链接的本质是创建一个指向原文件的路径" class="headerlink" title="链接的本质是创建一个指向原文件的路径"></a>链接的本质是创建一个指向原文件的路径</h3></li>
</ol>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170305/130909564.png" alt="mark"><br>我们的文件其实是存在磁盘空间中， 文件名指向磁盘空间，最后访问文件名  访问到它所指向的空间。</p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170305/112747867.png" alt="mark"></p>
<ol>
<li><p>符号链接<br>mklink /d</p>
<p>和快捷方式几乎。但与其不同的是快捷方式是.link后缀的文件。</p>
<p>删除原文件，这种链接就无效了</p>
<a id="more"></a></li>
<li><p>硬链接(hard link)<br>mklink /h</p>
<p>指向到原文件空间中所在地址。只能用于文件，<br>其实就是又新建了个文件名，指向共同的磁盘空间。所以删除其中一个文件名，不影响另一个。</p>
<p>与copy不同的是，copy实际是创建了两个不同的磁盘空间。</p>
</li>
</ol>
<ol>
<li><p>目录联接(junction)<br>mklink /j<br>所谓联结就是相当于一个中间件。<br>充当中介</p>
<p>只能用于目录。而且它用的相对路径，所以复制到别的文件夹是无效的。</p>
<p>这个用来做目录共享。</p>
<p>比如说 我想让b电脑访问  a电脑的目录aa<br>但是我就想让他访问一会。所以我可以创建个目录联结。然后共享这个目录。  等b访问完，直接就可以删掉这个目录。</p>
</li>
</ol>
<p>总的来说链接的本质是为了管理方便，充分利用磁盘空间，避免冗余。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近研究mklink 发现国内很多文档认识有错误  或者不充分，在此补充下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;符号链接 用的比较多  也就是我们的快捷方式&lt;/li&gt;
&lt;li&gt;硬链接  用的很少  可以防止误删，省空间等、&lt;/li&gt;
&lt;li&gt;目录联结   一般用于共享目录&lt;h3 id=&quot;链接的本质是创建一个指向原文件的路径&quot;&gt;&lt;a href=&quot;#链接的本质是创建一个指向原文件的路径&quot; class=&quot;headerlink&quot; title=&quot;链接的本质是创建一个指向原文件的路径&quot;&gt;&lt;/a&gt;链接的本质是创建一个指向原文件的路径&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170305/130909564.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;我们的文件其实是存在磁盘空间中， 文件名指向磁盘空间，最后访问文件名  访问到它所指向的空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170305/112747867.png&quot; alt=&quot;mark&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;符号链接&lt;br&gt;mklink /d&lt;/p&gt;
&lt;p&gt;和快捷方式几乎。但与其不同的是快捷方式是.link后缀的文件。&lt;/p&gt;
&lt;p&gt;删除原文件，这种链接就无效了&lt;/p&gt;
    
    </summary>
    
      <category term="window" scheme="http://sunhao.win/categories/window/"/>
    
    
      <category term="符号链接" scheme="http://sunhao.win/tags/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/"/>
    
      <category term="硬链接" scheme="http://sunhao.win/tags/%E7%A1%AC%E9%93%BE%E6%8E%A5/"/>
    
      <category term="目录联结" scheme="http://sunhao.win/tags/%E7%9B%AE%E5%BD%95%E8%81%94%E7%BB%93/"/>
    
      <category term="junction" scheme="http://sunhao.win/tags/junction/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-集合论，集合,数组 大O 第一篇</title>
    <link href="http://sunhao.win/2017/03/02/data-structure-set/"/>
    <id>http://sunhao.win/2017/03/02/data-structure-set/</id>
    <published>2017-03-02T00:55:57.000Z</published>
    <updated>2017-04-17T02:34:20.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合论-集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论-包含了集合、元素和成员关系等最基本的数学概念。"><a href="#集合论-集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论-包含了集合、元素和成员关系等最基本的数学概念。" class="headerlink" title="集合论: 集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论,包含了集合、元素和成员关系等最基本的数学概念。"></a>集合论: 集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论,包含了集合、元素和成员关系等最基本的数学概念。</h3><h3 id="集合（简称集）是数学中一个基本概念，它是集合论的研究对象-集合就是“一堆东西”。集合里的“东西”，叫作元素。"><a href="#集合（简称集）是数学中一个基本概念，它是集合论的研究对象-集合就是“一堆东西”。集合里的“东西”，叫作元素。" class="headerlink" title="集合（简称集）是数学中一个基本概念，它是集合论的研究对象.集合就是“一堆东西”。集合里的“东西”，叫作元素。"></a>集合（简称集）是数学中一个基本概念，它是集合论的研究对象.集合就是“一堆东西”。集合里的“东西”，叫作元素。</h3><p>集合A和B的并集，符号为A ∪ B<br>集合A和B的交集，符号为A ∩ B<br>集合U和A的相对差集，符号为U \ A<br>集合A和B的对称差，符号为A △ B或A⊕B</p>
<p>编程中的数组 是集合中的一种表现形式。</p>
<p>数组是在程序设计中，为了处理方便， 把具有相同类型的若干变量按有序的形式组织起来的一种形式。这些按序排列的同类数据元素的集合称为数组。<br>其中具有相同类型的若干变量按有序的形式组织起来的一种形式   就是我们说的成员关系。</p>
<p>①[x，y] ：中括号表示包括边界数字，即表示大于等于x小于等于y<br>②(x，y)：小括号是不包括边界，即表示大于x小于y<br>所以我们的数组 用[]来声明。而()已经被函数占用，所以不考虑。<br><a id="more"></a><br>大O 其实是omega的缩写  在数学上表示首个不可数的序数</p>
<p>序数是在基数的基础上再增加一层意思。<br>例如：<br>　　基数：一、二、三、四、五、六、七、八、九、十。<br>　　序数：第一、第二、第三、第四、第五、第六、第七、第八、第九、第十。<br>基数：<br>　　在数学上，基数（cardinal number）是集合论中刻画任意集合大小的一个概念。两个能够建立元素间一一对应的集合称为互相对等集合。例如3个人的集合和3匹马的集合可以建立一一对应，是两个对等的集合。<br>序数：<br>　　集合论基本概念之一，是日常使用的第一、第二等表示次序的数的推广。序数概念是建立在良序集概念之上的，而良序集又是偏序集、全序集的特殊情形。</p>
<p>数学的一个基本的分支学科，研究对象是一般集合。集合论在数学中占有一个独特的地位，它的基本概念已渗透到数学的所有领域。[1]  集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论，包含了集合、元素和成员关系等最基本的数学概念。在大多数现代数学的公式化中，集合论提供了要如何描述数学物件的语言。集合论和逻辑与一阶逻辑共同构成了数学的公理化基础，以未定义的“集合”与“集合成员”等术语来形式化地建构数学物件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集合论-集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论-包含了集合、元素和成员关系等最基本的数学概念。&quot;&gt;&lt;a href=&quot;#集合论-集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论-包含了集合、元素和成员关系等最基本的数学概念。&quot; class=&quot;headerlink&quot; title=&quot;集合论: 集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论,包含了集合、元素和成员关系等最基本的数学概念。&quot;&gt;&lt;/a&gt;集合论: 集合论或集论是研究集合（由一堆抽象物件构成的整体）的数学理论,包含了集合、元素和成员关系等最基本的数学概念。&lt;/h3&gt;&lt;h3 id=&quot;集合（简称集）是数学中一个基本概念，它是集合论的研究对象-集合就是“一堆东西”。集合里的“东西”，叫作元素。&quot;&gt;&lt;a href=&quot;#集合（简称集）是数学中一个基本概念，它是集合论的研究对象-集合就是“一堆东西”。集合里的“东西”，叫作元素。&quot; class=&quot;headerlink&quot; title=&quot;集合（简称集）是数学中一个基本概念，它是集合论的研究对象.集合就是“一堆东西”。集合里的“东西”，叫作元素。&quot;&gt;&lt;/a&gt;集合（简称集）是数学中一个基本概念，它是集合论的研究对象.集合就是“一堆东西”。集合里的“东西”，叫作元素。&lt;/h3&gt;&lt;p&gt;集合A和B的并集，符号为A ∪ B&lt;br&gt;集合A和B的交集，符号为A ∩ B&lt;br&gt;集合U和A的相对差集，符号为U \ A&lt;br&gt;集合A和B的对称差，符号为A △ B或A⊕B&lt;/p&gt;
&lt;p&gt;编程中的数组 是集合中的一种表现形式。&lt;/p&gt;
&lt;p&gt;数组是在程序设计中，为了处理方便， 把具有相同类型的若干变量按有序的形式组织起来的一种形式。这些按序排列的同类数据元素的集合称为数组。&lt;br&gt;其中具有相同类型的若干变量按有序的形式组织起来的一种形式   就是我们说的成员关系。&lt;/p&gt;
&lt;p&gt;①[x，y] ：中括号表示包括边界数字，即表示大于等于x小于等于y&lt;br&gt;②(x，y)：小括号是不包括边界，即表示大于x小于y&lt;br&gt;所以我们的数组 用[]来声明。而()已经被函数占用，所以不考虑。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://sunhao.win/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="集合" scheme="http://sunhao.win/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="数组" scheme="http://sunhao.win/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>python-列表list,元组tuple,字典dict,集合set</title>
    <link href="http://sunhao.win/2017/03/02/python-list-tuple-dict-set/"/>
    <id>http://sunhao.win/2017/03/02/python-list-tuple-dict-set/</id>
    <published>2017-03-02T00:40:27.000Z</published>
    <updated>2017-03-02T02:53:45.875Z</updated>
    
    <content type="html"><![CDATA[<p>数序: 全称是数字序列，就是指数字按照一定规律所排出来的顺序。<br>序数: 表顺序的数,像第1、第2、第3。</p>
<p>序列的两个特点：<br>1.索引操作符，从序列中抓取一个特定项目<br>2.和切片操作符，获取序列的一个切片，即一部分序列</p>
<p>Python一些内置函数<br>1、cmp(A, B)：比较可为list、tuple等的A、B，A&gt;B为1，A=B为0，小于为-1<br>2、len(obj)： 计算元素个数。<br>3、max(obj)：返回元素最大值。<br>4、min(obj)：返回元素最小值。<br>5、reversed(obj): 对元素进行翻转<br>6、enumerate(obj): 遍历list的元素，返回序号及其对应的元素 for x，y in list：<br>7、zip():打包成tuple（元组），然后返回由这些tuples组成的list（列表）</p>
<p>列表、元组和字符串都是序列，字符串是字符的序列，列表和元祖是任意类型的序列</p>
<p>列表list，用中括号“[ ]”表示</p>
<p>1.任意对象的有序集合<br>列表是一组任意类型的值，按照一定顺序组合而成的<br>2.通过偏移读取<br>组成列表的值叫做元素(Elements)。每一个元素被标识一个索引，第一个索引是0，序列的功能都能实现<br>3.可变长度，异构以及任意嵌套<br>列表中的元素可以是任意类型，甚至是列表类型，也就是说列表可以嵌套<br>4.可变的序列<br>支持索引、切片、合并、删除等等操作，它们都是在原处进行修改列表<br>5.对象引用数组<br>列表可以当成普通的数组，每当用到引用时，Python总是会将这个引用指向一个对象，所以程序只需处理对象的操作。当把一个对象赋给一个数据结构元素或变量名时，Python总是会存储对象的引用，而不是对象的一个拷贝</p>
<p>#!/usr/bin/env python</p>
<p>#coding:utf-8</p>
<p>‘’’<br>FuncName: study_list.py<br>Desc: list 内建函数<br>Date: 2016-03-17 14:00<br>Author: johnny<br>‘’’</p>
<p> L.append(var)              # 追加元素，加在最后<br> L.insert(index,var)        # 在index的位置追加元素，位置就是索引<br> L.pop(var)                 # 从list中删除最后一个元素，并返回该元素<br> L.remove(var)              # 删除第一次出现的该元素<br> L.count(var)               # 该元素在列表中出现的个数<br> L.index(var)               # 该元素的位置（索引号）,无则抛异常<br> L.extend(list)             # 追加list，即合并list到L上，两个列表合并<br> L.sort()                   # 排序<br> L.reverse()                # 原地翻转列表，从前到后变成从后向前<br> l = [1,2,3,4,[‘hello’,’johnny’],’blog.csdn.net/z_johnny’]   # 创建list<br> l[1:5:2]                   # list的切片，切一部分，范围为索引[1，5)，即1、2、3、4不包括5，隔2取1个值 l[1:5:2] == [2, 4]<br> l[1]                       # list的索引，左1索引为0，右1索引为-1，l[1] == 2<br> l[4][1]                    # 列表支持嵌套，l[4][1] == ‘johnny’</p>
<p>list的官方内置函数可用dir(list)与help(list) 命令进行查看</p>
<p>元祖tuple，用小括号“( )”表示</p>
<p>1.任意对象的有序集合<br>与列表相同<br>2.通过偏移存取<br>与列表相同<br>3.属于不可变序列类型<br>类似于字符串，但元组是不可变的，不支持在列表中任何原处修改操作，不支持任何方法调用<br>4.固定长度、异构、任意嵌套<br>固定长度即元组不可变，在不被拷贝的情况下长度固定，其他同列表<br>5.对象引用的数组<br>与列表相似，元祖是对象引用的数组</p>
<p>和list相比<br>1.比列表操作速度快<br>2.对数据“写保护“<br>3.可用于字符串格式化中<br>4.可作为字典的key</p>
<p>#!/usr/bin/env python</p>
<p>#coding:utf-8</p>
<p>‘’’<br>FuncName: study_tuple.py<br>Desc: tuple 内建函数<br>Date: 2016-03-17 14:00<br>Author: johnny<br>‘’’</p>
<p> t.count(var)               # 该元素在元组中出现的个数<br> t.index(var)               # 该元素的位置（索引号）,无则抛异常<br> t = (1,2,3,4,[‘hello’,’johnny’],’blog.csdn.net/z_johnny’)   # 创建tuple<br> tu = (5,)                  # 只含有一个元素的元祖，必须加逗号“,”<br> t[1:5:2]                   # tuple的切片，切一部分，范围为索引[1，5)，即1、2、3、4不包括5，隔2取1个值 t[1:5:2]== (2, 4)<br> t[1]                       # tuple的索引，左1索引为0，右1索引为-1，t[1] == 2<br> t[4][1]                    # 同列表一样支持嵌套，t[4][1] == ‘johnny’</p>
<p>tuple的官方内置函数可用dir(tuple)与help(tuple) 命令进行查看</p>
<p>字典dict，用大括号“{key，value}”表示</p>
<p>1.通过键而不是偏移量来读取<br>字典就是一个关联数组，是一个通过关键字索引的对象的集合，使用键-值（key-value）进行存储，查找速度快<br>2.任意对象的无序集合<br>字典中的项没有特定顺序，以“键”为象征<br>3.可变长、异构、任意嵌套<br>同列表，嵌套可以包含列表和其他的字典等<br>4.属于可变映射类型<br>因为是无序，故不能进行序列操作，但可以在远处修改，通过键映射到值。字典是唯一内置的映射类型（键映射到值的对象）<br>5.对象引用表<br>字典存储的是对象引用，不是拷贝，和列表一样。字典的key是不能变的，list不能作为key，字符串、元祖、整数等都可以</p>
<p>和list比较，dict有以下几个特点：<br>1.查找和插入的速度极快，不会随着key的增加而增加<br>2.需要占用大量的内存，内存浪费多<br>而list相反：<br>1.查找和插入的时间随着元素的增加而增加<br>2.占用空间小，浪费内存很少<br>所以，dict是用空间来换取时间的一种方法</p>
<p>#!usr/bin/env python</p>
<p>#coding:utf-8</p>
<p>‘’’<br>FuncName: study_dict.py<br>Desc: dict 内建函数<br>Date: 2016-03-17 14:00<br>Author: johnny<br>‘’’</p>
<p>d = {‘Name’: ‘Johnny’, ‘Address’:’blog.csdn.net/z_johnny’}  # 创建dict<br>d[‘Name’]                      # 找出key为Name的值 d[‘Name’] == ‘Johnny’<br>d[‘Name’] = hello              # 更新key为Name的值 Name对应的值从Johnny改为hello<br>del d[‘Address’]               # 删除key为Name的值和该key d = {‘Name’: ‘Johnny’}<br>d.clear()                      # 删除字典d中的所有元素 d = {}<br>d.pop(‘Name’)                  # 删除字典d中key为’Name’的值和该键<br>d.copy()                       # 返回字典d的浅复制副本<br>d.fromkeys(S[,v])              # 创建一个新的字典，设置键为seq 和值为value<br>d.get(key, default=None)       # 返回该键key的值，若没有该键，则返回None<br>d.has_key(key)                 # 如果在字典d中存在键key，则返回true，否则返回 false<br>d.items()                      # 返回字典的（键，值）元组对的列表<br>d.keys()                       # 返回字典的键的列表<br>d.values()                     # 返回字典d的值列表<br>d.setdefault(key, default=None)# 类似get()</p>
<pre><code># 但会设定d[key]=default 如果key不在字典d中
</code></pre><p>d.update(d2)                   # 将字典d2的键值对增加到字典d中<br>d.iteritems()                  # （键，值）项的一个迭代器<br>d.iterkeys()                   # 字典d中键的一个迭代器<br>d.itervalues()                 # 字典d中值的一个迭代器<br>d.popitem()                    # 删除元组返回键、值，若字典d为空会报key错<br>d.viewitems()                  # 像对象一样提供字典d中项的一个视图<br>d.viewkeys()                   # 像对象一样提供字典d中key的一个视图<br>d.viewvalues()                 # 像对象一样提供字典d中value的一个视图  </p>
<p>dict的官方内置函数可用dir(dict)与help(dict) 命令进行查看</p>
<p>集合set，用小括号“( )”表示</p>
<p>1.是一组key的集合，但不存储value，并且key不能重复<br>创建一个set，需要提供一个list作为输入集合,s = set([1,2,3]),注意，传入的参数 [1, 2, 3] 是一个list，而显示的 set([1, 2, 3]) 只是告诉你这个set内部有1，2，3这3个元素，显示的[ ]不表示这是一个list<br>2.重复元素在set中自动被过滤<br>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作</p>
<p>还有一种集合是forzenset( )，是冻结的集合，它是不可变的，存在哈希值，好处是它可以作为字典的key，也可以作为其它集合的元素。缺点是一旦创建便不能更改，没有add，remove方法</p>
<p>和dict对比<br>1.set和dict的唯一区别仅在于没有存储对应的value<br>2.set的原理和dict一样，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”</p>
<p>#!usr/bin/env python</p>
<p>#coding:utf-8</p>
<p>‘’’<br>FuncName: study_set.py<br>Desc: set 内建函数<br>Date: 2016-03-17 14:00<br>Author: johnny<br>‘’’</p>
<p>s = set([1,2,3])            # 创建一个数值set，有1，2，3三个元素s == set([1, 2, 3])<br>se = set(‘Hello’)           # 创建一个唯一字符的集合s == set([‘H’, ‘e’, ‘l’, ‘o’])<br>a = s | se                  # s 和 se 的并集 set([1, 2, 3, ‘e’, ‘H’, ‘l’, ‘o’])<br>b = s &amp; se                  # s 和 se 的交集 set([]) 没有相同项为空<br>c = s – se                 # 求差集（项在s中，但不在se中） set([1, 2, 3])<br>d = s ^ se                  # 对称差集（项在s或se中，但不会同时出现在二者中）</p>
<pre><code># set([1, 2, 3, &apos;e&apos;, &apos;H&apos;, &apos;l&apos;, &apos;o&apos;])
</code></pre><p>s.issubset(t)               # 如果s是t的子集,则返回True,否则返回False<br>s.issuperset(t)             # 如果t是s的超集,则返回True,否则返回False<br>s.union(t)                  # 返回一个新集合,该集合是s和t的并集<br>s.intersection(t)           # 返回一个新集合,该集合是s和t的交集<br>s.difference(t)             # 返回一个新集合,该集合是 s 的成员,但不是 t 的成员<br>s.symmetric_difference(t)   # 返回一个新集合,该集合是s或t的成员,但不是s和t共有的成员<br>s.copy()                    # 返回一个新集合,它是集合s的浅复制<br>s.update(t)                 # 用t中的元素修改s，即s现在包含s或t的成员<br>s.intersection_update(t)    # s中的成员是共同属于s和t中的元素<br>s.difference_update(t)      # s中的成员是属于s但不包含在t中的元素<br>s.symmetric_difference_update(t)    # s中的成员更新为那些包含在s或t中，</p>
<pre><code># 但不是s和t共有的元素
</code></pre><p>s.add(obj)                  # 在集合s中添加对象obj<br>s.remove(obj)               # 从集合s中删除对象obj，如果obj不是集合s中的元素</p>
<pre><code># （obj not in s），将引发KeyError
</code></pre><p>s.discard(obj)              # 如果obj是集合s中的元素，从集合s中删除对象obj<br>s.pop()                     # 删除集合是中的任意一个对象，并返回它<br>s.clear()                   # 删除集合s中的所有元素</p>
<p>set的官方内置函数可用dir(set)与help(set) 命令进行查看<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数序: 全称是数字序列，就是指数字按照一定规律所排出来的顺序。&lt;br&gt;序数: 表顺序的数,像第1、第2、第3。&lt;/p&gt;
&lt;p&gt;序列的两个特点：&lt;br&gt;1.索引操作符，从序列中抓取一个特定项目&lt;br&gt;2.和切片操作符，获取序列的一个切片，即一部分序列&lt;/p&gt;
&lt;p&gt;Python一些内置函数&lt;br&gt;1、cmp(A, B)：比较可为list、tuple等的A、B，A&amp;gt;B为1，A=B为0，小于为-1&lt;br&gt;2、len(obj)： 计算元素个数。&lt;br&gt;3、max(obj)：返回元素最大值。&lt;br&gt;4、min(obj)：返回元素最小值。&lt;br&gt;5、reversed(obj): 对元素进行翻转&lt;br&gt;6、enumerate(obj): 遍历list的元素，返回序号及其对应的元素 for x，y in list：&lt;br&gt;7、zip():打包成tuple（元组），然后返回由这些tuples组成的list（列表）&lt;/p&gt;
&lt;p&gt;列表、元组和字符串都是序列，字符串是字符的序列，列表和元祖是任意类型的序列&lt;/p&gt;
&lt;p&gt;列表list，用中括号“[ ]”表示&lt;/p&gt;
&lt;p&gt;1.任意对象的有序集合&lt;br&gt;列表是一组任意类型的值，按照一定顺序组合而成的&lt;br&gt;2.通过偏移读取&lt;br&gt;组成列表的值叫做元素(Elements)。每一个元素被标识一个索引，第一个索引是0，序列的功能都能实现&lt;br&gt;3.可变长度，异构以及任意嵌套&lt;br&gt;列表中的元素可以是任意类型，甚至是列表类型，也就是说列表可以嵌套&lt;br&gt;4.可变的序列&lt;br&gt;支持索引、切片、合并、删除等等操作，它们都是在原处进行修改列表&lt;br&gt;5.对象引用数组&lt;br&gt;列表可以当成普通的数组，每当用到引用时，Python总是会将这个引用指向一个对象，所以程序只需处理对象的操作。当把一个对象赋给一个数据结构元素或变量名时，Python总是会存储对象的引用，而不是对象的一个拷贝&lt;/p&gt;
&lt;p&gt;#!/usr/bin/env python&lt;/p&gt;
&lt;p&gt;#coding:utf-8&lt;/p&gt;
&lt;p&gt;‘’’&lt;br&gt;FuncName: study_list.py&lt;br&gt;Desc: list 内建函数&lt;br&gt;Date: 2016-03-17 14:00&lt;br&gt;Author: johnny&lt;br&gt;‘’’&lt;/p&gt;
&lt;p&gt; L.append(var)              # 追加元素，加在最后&lt;br&gt; L.insert(index,var)        # 在index的位置追加元素，位置就是索引&lt;br&gt; L.pop(var)                 # 从list中删除最后一个元素，并返回该元素&lt;br&gt; L.remove(var)              # 删除第一次出现的该元素&lt;br&gt; L.count(var)               # 该元素在列表中出现的个数&lt;br&gt; L.index(var)               # 该元素的位置（索引号）,无则抛异常&lt;br&gt; L.extend(list)             # 追加list，即合并list到L上，两个列表合并&lt;br&gt; L.sort()                   # 排序&lt;br&gt; L.reverse()                # 原地翻转列表，从前到后变成从后向前&lt;br&gt; l = [1,2,3,4,[‘hello’,’johnny’],’blog.csdn.net/z_johnny’]   # 创建list&lt;br&gt; l[1:5:2]                   # list的切片，切一部分，范围为索引[1，5)，即1、2、3、4不包括5，隔2取1个值 l[1:5:2] == [2, 4]&lt;br&gt; l[1]                       # list的索引，左1索引为0，右1索引为-1，l[1] == 2&lt;br&gt; l[4][1]                    # 列表支持嵌套，l[4][1] == ‘johnny’&lt;/p&gt;
&lt;p&gt;list的官方内置函数可用dir(list)与help(list) 命令进行查看&lt;/p&gt;
&lt;p&gt;元祖tuple，用小括号“( )”表示&lt;/p&gt;
&lt;p&gt;1.任意对象的有序集合&lt;br&gt;与列表相同&lt;br&gt;2.通过偏移存取&lt;br&gt;与列表相同&lt;br&gt;3.属于不可变序列类型&lt;br&gt;类似于字符串，但元组是不可变的，不支持在列表中任何原处修改操作，不支持任何方法调用&lt;br&gt;4.固定长度、异构、任意嵌套&lt;br&gt;固定长度即元组不可变，在不被拷贝的情况下长度固定，其他同列表&lt;br&gt;5.对象引用的数组&lt;br&gt;与列表相似，元祖是对象引用的数组&lt;/p&gt;
&lt;p&gt;和list相比&lt;br&gt;1.比列表操作速度快&lt;br&gt;2.对数据“写保护“&lt;br&gt;3.可用于字符串格式化中&lt;br&gt;4.可作为字典的key&lt;/p&gt;
&lt;p&gt;#!/usr/bin/env python&lt;/p&gt;
&lt;p&gt;#coding:utf-8&lt;/p&gt;
&lt;p&gt;‘’’&lt;br&gt;FuncName: study_tuple.py&lt;br&gt;Desc: tuple 内建函数&lt;br&gt;Date: 2016-03-17 14:00&lt;br&gt;Author: johnny&lt;br&gt;‘’’&lt;/p&gt;
&lt;p&gt; t.count(var)               # 该元素在元组中出现的个数&lt;br&gt; t.index(var)               # 该元素的位置（索引号）,无则抛异常&lt;br&gt; t = (1,2,3,4,[‘hello’,’johnny’],’blog.csdn.net/z_johnny’)   # 创建tuple&lt;br&gt; tu = (5,)                  # 只含有一个元素的元祖，必须加逗号“,”&lt;br&gt; t[1:5:2]                   # tuple的切片，切一部分，范围为索引[1，5)，即1、2、3、4不包括5，隔2取1个值 t[1:5:2]== (2, 4)&lt;br&gt; t[1]                       # tuple的索引，左1索引为0，右1索引为-1，t[1] == 2&lt;br&gt; t[4][1]                    # 同列表一样支持嵌套，t[4][1] == ‘johnny’&lt;/p&gt;
&lt;p&gt;tuple的官方内置函数可用dir(tuple)与help(tuple) 命令进行查看&lt;/p&gt;
&lt;p&gt;字典dict，用大括号“{key，value}”表示&lt;/p&gt;
&lt;p&gt;1.通过键而不是偏移量来读取&lt;br&gt;字典就是一个关联数组，是一个通过关键字索引的对象的集合，使用键-值（key-value）进行存储，查找速度快&lt;br&gt;2.任意对象的无序集合&lt;br&gt;字典中的项没有特定顺序，以“键”为象征&lt;br&gt;3.可变长、异构、任意嵌套&lt;br&gt;同列表，嵌套可以包含列表和其他的字典等&lt;br&gt;4.属于可变映射类型&lt;br&gt;因为是无序，故不能进行序列操作，但可以在远处修改，通过键映射到值。字典是唯一内置的映射类型（键映射到值的对象）&lt;br&gt;5.对象引用表&lt;br&gt;字典存储的是对象引用，不是拷贝，和列表一样。字典的key是不能变的，list不能作为key，字符串、元祖、整数等都可以&lt;/p&gt;
&lt;p&gt;和list比较，dict有以下几个特点：&lt;br&gt;1.查找和插入的速度极快，不会随着key的增加而增加&lt;br&gt;2.需要占用大量的内存，内存浪费多&lt;br&gt;而list相反：&lt;br&gt;1.查找和插入的时间随着元素的增加而增加&lt;br&gt;2.占用空间小，浪费内存很少&lt;br&gt;所以，dict是用空间来换取时间的一种方法&lt;/p&gt;
&lt;p&gt;#!usr/bin/env python&lt;/p&gt;
&lt;p&gt;#coding:utf-8&lt;/p&gt;
&lt;p&gt;‘’’&lt;br&gt;FuncName: study_dict.py&lt;br&gt;Desc: dict 内建函数&lt;br&gt;Date: 2016-03-17 14:00&lt;br&gt;Author: johnny&lt;br&gt;‘’’&lt;/p&gt;
&lt;p&gt;d = {‘Name’: ‘Johnny’, ‘Address’:’blog.csdn.net/z_johnny’}  # 创建dict&lt;br&gt;d[‘Name’]                      # 找出key为Name的值 d[‘Name’] == ‘Johnny’&lt;br&gt;d[‘Name’] = hello              # 更新key为Name的值 Name对应的值从Johnny改为hello&lt;br&gt;del d[‘Address’]               # 删除key为Name的值和该key d = {‘Name’: ‘Johnny’}&lt;br&gt;d.clear()                      # 删除字典d中的所有元素 d = {}&lt;br&gt;d.pop(‘Name’)                  # 删除字典d中key为’Name’的值和该键&lt;br&gt;d.copy()                       # 返回字典d的浅复制副本&lt;br&gt;d.fromkeys(S[,v])              # 创建一个新的字典，设置键为seq 和值为value&lt;br&gt;d.get(key, default=None)       # 返回该键key的值，若没有该键，则返回None&lt;br&gt;d.has_key(key)                 # 如果在字典d中存在键key，则返回true，否则返回 false&lt;br&gt;d.items()                      # 返回字典的（键，值）元组对的列表&lt;br&gt;d.keys()                       # 返回字典的键的列表&lt;br&gt;d.values()                     # 返回字典d的值列表&lt;br&gt;d.setdefault(key, default=None)# 类似get()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 但会设定d[key]=default 如果key不在字典d中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;d.update(d2)                   # 将字典d2的键值对增加到字典d中&lt;br&gt;d.iteritems()                  # （键，值）项的一个迭代器&lt;br&gt;d.iterkeys()                   # 字典d中键的一个迭代器&lt;br&gt;d.itervalues()                 # 字典d中值的一个迭代器&lt;br&gt;d.popitem()                    # 删除元组返回键、值，若字典d为空会报key错&lt;br&gt;d.viewitems()                  # 像对象一样提供字典d中项的一个视图&lt;br&gt;d.viewkeys()                   # 像对象一样提供字典d中key的一个视图&lt;br&gt;d.viewvalues()                 # 像对象一样提供字典d中value的一个视图  &lt;/p&gt;
&lt;p&gt;dict的官方内置函数可用dir(dict)与help(dict) 命令进行查看&lt;/p&gt;
&lt;p&gt;集合set，用小括号“( )”表示&lt;/p&gt;
&lt;p&gt;1.是一组key的集合，但不存储value，并且key不能重复&lt;br&gt;创建一个set，需要提供一个list作为输入集合,s = set([1,2,3]),注意，传入的参数 [1, 2, 3] 是一个list，而显示的 set([1, 2, 3]) 只是告诉你这个set内部有1，2，3这3个元素，显示的[ ]不表示这是一个list&lt;br&gt;2.重复元素在set中自动被过滤&lt;br&gt;set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作&lt;/p&gt;
&lt;p&gt;还有一种集合是forzenset( )，是冻结的集合，它是不可变的，存在哈希值，好处是它可以作为字典的key，也可以作为其它集合的元素。缺点是一旦创建便不能更改，没有add，remove方法&lt;/p&gt;
&lt;p&gt;和dict对比&lt;br&gt;1.set和dict的唯一区别仅在于没有存储对应的value&lt;br&gt;2.set的原理和dict一样，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”&lt;/p&gt;
&lt;p&gt;#!usr/bin/env python&lt;/p&gt;
&lt;p&gt;#coding:utf-8&lt;/p&gt;
&lt;p&gt;‘’’&lt;br&gt;FuncName: study_set.py&lt;br&gt;Desc: set 内建函数&lt;br&gt;Date: 2016-03-17 14:00&lt;br&gt;Author: johnny&lt;br&gt;‘’’&lt;/p&gt;
&lt;p&gt;s = set([1,2,3])            # 创建一个数值set，有1，2，3三个元素s == set([1, 2, 3])&lt;br&gt;se = set(‘Hello’)           # 创建一个唯一字符的集合s == set([‘H’, ‘e’, ‘l’, ‘o’])&lt;br&gt;a = s | se                  # s 和 se 的并集 set([1, 2, 3, ‘e’, ‘H’, ‘l’, ‘o’])&lt;br&gt;b = s &amp;amp; se                  # s 和 se 的交集 set([]) 没有相同项为空&lt;br&gt;c = s – se                 # 求差集（项在s中，但不在se中） set([1, 2, 3])&lt;br&gt;d = s ^ se                  # 对称差集（项在s或se中，但不会同时出现在二者中）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# set([1, 2, 3, &amp;apos;e&amp;apos;, &amp;apos;H&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;s.issubset(t)               # 如果s是t的子集,则返回True,否则返回False&lt;br&gt;s.issuperset(t)             # 如果t是s的超集,则返回True,否则返回False&lt;br&gt;s.union(t)                  # 返回一个新集合,该集合是s和t的并集&lt;br&gt;s.intersection(t)           # 返回一个新集合,该集合是s和t的交集&lt;br&gt;s.difference(t)             # 返回一个新集合,该集合是 s 的成员,但不是 t 的成员&lt;br&gt;s.symmetric_difference(t)   # 返回一个新集合,该集合是s或t的成员,但不是s和t共有的成员&lt;br&gt;s.copy()                    # 返回一个新集合,它是集合s的浅复制&lt;br&gt;s.update(t)                 # 用t中的元素修改s，即s现在包含s或t的成员&lt;br&gt;s.intersection_update(t)    # s中的成员是共同属于s和t中的元素&lt;br&gt;s.difference_update(t)      # s中的成员是属于s但不包含在t中的元素&lt;br&gt;s.symmetric_difference_update(t)    # s中的成员更新为那些包含在s或t中，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 但不是s和t共有的元素
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;s.add(obj)                  # 在集合s中添加对象obj&lt;br&gt;s.remove(obj)               # 从集合s中删除对象obj，如果obj不是集合s中的元素&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# （obj not in s），将引发KeyError
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;s.discard(obj)              # 如果obj是集合s中的元素，从集合s中删除对象obj&lt;br&gt;s.pop()                     # 删除集合是中的任意一个对象，并返回它&lt;br&gt;s.clear()                   # 删除集合s中的所有元素&lt;/p&gt;
&lt;p&gt;set的官方内置函数可用dir(set)与help(set) 命令进行查看&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://sunhao.win/categories/python/"/>
    
    
      <category term="数序" scheme="http://sunhao.win/tags/%E6%95%B0%E5%BA%8F/"/>
    
      <category term="序列" scheme="http://sunhao.win/tags/%E5%BA%8F%E5%88%97/"/>
    
      <category term="数据结构" scheme="http://sunhao.win/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="list" scheme="http://sunhao.win/tags/list/"/>
    
      <category term="tuple" scheme="http://sunhao.win/tags/tuple/"/>
    
      <category term="dict" scheme="http://sunhao.win/tags/dict/"/>
    
      <category term="set" scheme="http://sunhao.win/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>名词 吞吐量 带宽 QPS TPS DDOS流量 并发用户数</title>
    <link href="http://sunhao.win/2017/03/01/safe-noun/"/>
    <id>http://sunhao.win/2017/03/01/safe-noun/</id>
    <published>2017-03-01T01:00:44.000Z</published>
    <updated>2017-03-01T06:25:40.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。-1"><a href="#Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。-1" class="headerlink" title="Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。[1]"></a>Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。[1]</h3><h3 id="Max-net-bitrate-带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。"><a href="#Max-net-bitrate-带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。" class="headerlink" title="Max net bitrate: 带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。"></a>Max net bitrate: 带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。</h3><p>两者需要区分链路上的可用带宽（带宽）与实际链路中每秒所能传送的比特数（吞吐量）。通常更倾向于用“吞吐量”一词来表示一个系统的测试性能。这样，因为实现受各种低效率因素的影响，所以由一段带宽为10Mbps的链路连接的一对节点可能只达到2Mbps的吞吐量。</p>
<h3 id="QPS：Queries-Per-Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches-sec，即每秒的响应请求数，也即是最大吞吐能力。"><a href="#QPS：Queries-Per-Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches-sec，即每秒的响应请求数，也即是最大吞吐能力。" class="headerlink" title="QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。"></a>QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。</h3><a id="more"></a>
<h3 id="TPS是-TransactionsPerSecond的缩写，也就是事务数-秒。"><a href="#TPS是-TransactionsPerSecond的缩写，也就是事务数-秒。" class="headerlink" title="TPS是 TransactionsPerSecond的缩写，也就是事务数/秒。"></a>TPS是 TransactionsPerSecond的缩写，也就是事务数/秒。</h3><p>它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器 做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息来估计得分。客户机使 用加权协函数平均方法来计算客户机的得分，测试软件就是利用客户机的这些信息使用加权协函数平均方法来计算服务器端的整体TPS得分。</p>
<h3 id="DDOS流量"><a href="#DDOS流量" class="headerlink" title="DDOS流量"></a>DDOS流量</h3><p>该防御值主要针对DNS服务器进行DDOS攻击所产生的流量。这种攻击方式，是指借助于客户/服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDOS攻击，从而成倍地提高拒绝服务攻击的威力。</p>
<h3 id="响应时间-RT"><a href="#响应时间-RT" class="headerlink" title="响应时间(RT)"></a>响应时间(RT)</h3><p>响应时间是指系统对请求作出响应的时间。对于一个游戏软件来说，响应时间小于100毫秒应该是不错的，响应时间在1秒左右可能属于勉强可以接受，如果响应时间达到3秒就完全难以接受了。而对于编译系统来说，完整编译一个较大规模软件的源代码可能需要几十分钟甚至更长时间，但这些响应时间对于用户来说都是可以接受的。 </p>
<h3 id="吞吐量-Throughput"><a href="#吞吐量-Throughput" class="headerlink" title="吞吐量(Throughput)"></a>吞吐量(Throughput)</h3><pre><code>吞吐量是指系统在单位时间内处理请求的数量。对于无并发的应用系统而言，吞吐量与响应时间成严格的反比关系，实际上此时吞吐量就是响应时间的倒数。前面已经说过，对于单用户的系统，响应时间（或者系统响应时间和应用延迟时间）可以很好地度量系统的性能，但对于并发系统，通常需要用吞吐量作为性能指标。 
</code></pre><p>　　对于一个多用户的系统，如果只有一个用户使用时系统的平均响应时间是t，当有你n个用户使用时，每个用户看到的响应时间通常并不是n×t，而往往比n×t小很多（当然，在某些特殊情况下也可能比n×t大，甚至大很多）。这是因为处理每个请求需要用到很多资源，由于每个请求的处理过程中有许多不走难以并发执行，这导致在具体的一个时间点，所占资源往往并不多。也就是说在处理单个请求时，在每个时间点都可能有许多资源被闲置，当处理多个请求时，如果资源配置合理，每个用户看到的平均响应时间并不随用户数的增加而线性增加。实际上，不同系统的平均响应时间随用户数增加而增长的速度也不大相同，这也是采用吞吐量来度量并发系统的性能的主要原因。一般而言，吞吐量是一个比较通用的指标，两个具有不同用户数和用户使用模式的系统，如果其最大吞吐量基本一致，则可以判断两个系统的处理能力基本一致。 </p>
<h3 id="并发用户数"><a href="#并发用户数" class="headerlink" title="并发用户数"></a>并发用户数</h3><p>　　并发用户数是指系统可以同时承载的正常使用系统功能的用户的数量。与吞吐量相比，并发用户数是一个更直观但也更笼统的性能指标。实际上，并发用户数是一个非常不准确的指标，因为用户不同的使用模式会导致不同用户在单位时间发出不同数量的请求。一网站系统为例，假设用户只有注册后才能使用，但注册用户并不是每时每刻都在使用该网站，因此具体一个时刻只有部分注册用户同时在线，在线用户就在浏览网站时会花很多时间阅读网站上的信息，因而具体一个时刻只有部分在线用户同时向系统发出请求。这样，对于网站系统我们会有三个关于用户数的统计数字：注册用户数、在线用户数和同时发请求用户数。由于注册用户可能长时间不登陆网站，使用注册用户数作为性能指标会造成很大的误差。而在线用户数和同事发请求用户数都可以作为性能指标。相比而言，以在线用户作为性能指标更直观些，而以同时发请求用户数作为性能指标更准确些。 </p>
<p>从以上概念来看吞吐量和响应时间是衡量系统性能的重要指标，QPS虽然和吞吐量的计量单位不同，但应该是成正比的，任何一个指标都可以含量服务器的并行处理能力。当然Throughput更关心数据量，QPS更关心处理笔数。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。-1&quot;&gt;&lt;a href=&quot;#Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。-1&quot; class=&quot;headerlink&quot; title=&quot;Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。[1]&quot;&gt;&lt;/a&gt;Throughput：吞吐量。防火墙吞吐量是指在没有帧丢失的情况下，设备能够接收并转发的最大数据速率。[1]&lt;/h3&gt;&lt;h3 id=&quot;Max-net-bitrate-带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。&quot;&gt;&lt;a href=&quot;#Max-net-bitrate-带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。&quot; class=&quot;headerlink&quot; title=&quot;Max net bitrate: 带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。&quot;&gt;&lt;/a&gt;Max net bitrate: 带宽。指链路上每秒所能传送的比特数，它取决于链路时钟速率和信道编码在计算机网络中又称为线速。可以说以太网的带宽是10Mbps。&lt;/h3&gt;&lt;p&gt;两者需要区分链路上的可用带宽（带宽）与实际链路中每秒所能传送的比特数（吞吐量）。通常更倾向于用“吞吐量”一词来表示一个系统的测试性能。这样，因为实现受各种低效率因素的影响，所以由一段带宽为10Mbps的链路连接的一对节点可能只达到2Mbps的吞吐量。&lt;/p&gt;
&lt;h3 id=&quot;QPS：Queries-Per-Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches-sec，即每秒的响应请求数，也即是最大吞吐能力。&quot;&gt;&lt;a href=&quot;#QPS：Queries-Per-Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches-sec，即每秒的响应请求数，也即是最大吞吐能力。&quot; class=&quot;headerlink&quot; title=&quot;QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。&quot;&gt;&lt;/a&gt;QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。&lt;/h3&gt;
    
    </summary>
    
      <category term="网络安全" scheme="http://sunhao.win/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="QPS" scheme="http://sunhao.win/tags/QPS/"/>
    
      <category term="TPS" scheme="http://sunhao.win/tags/TPS/"/>
    
      <category term="吞吐量" scheme="http://sunhao.win/tags/%E5%90%9E%E5%90%90%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>position:absolute-top,right,bottom,left为0使用</title>
    <link href="http://sunhao.win/2017/02/26/css-top-right-bootom-left-zero/"/>
    <id>http://sunhao.win/2017/02/26/css-top-right-bootom-left-zero/</id>
    <published>2017-02-26T11:27:57.000Z</published>
    <updated>2017-02-26T12:29:38.723Z</updated>
    
    <content type="html"><![CDATA[<p>  绝对定位一直用起来非常方便，直接脱离文本流。偶然发现它还有个超强的功能。竟然可以撑开盒子宽高。</p>
<h2 id="对外"><a href="#对外" class="headerlink" title="对外"></a>对外</h2><h3 id="默认情况下，看代码；盒子如果设置-宽高后-设置绝对定位-bottom为0会自动抵底部。"><a href="#默认情况下，看代码；盒子如果设置-宽高后-设置绝对定位-bottom为0会自动抵底部。" class="headerlink" title="默认情况下，看代码；盒子如果设置   宽高后   设置绝对定位,bottom为0会自动抵底部。"></a>默认情况下，看代码；盒子如果设置   宽高后   设置绝对定位,bottom为0会自动抵底部。</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170226/194602705.png" alt="mark"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            .wai&#123;</div><div class="line">                position:relative;</div><div class="line">                top: 300px;</div><div class="line">                left: 300px;</div><div class="line">                width: 233px;</div><div class="line">                height: 370px;</div><div class="line">                background-color: yellow;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            .nei&#123;</div><div class="line">                position: absolute;</div><div class="line">                /*top: 0px;*/</div><div class="line">                /*left: 0px;</div><div class="line">                right: 0px;*/</div><div class="line">                bottom: 0px;</div><div class="line">                width: 100px;</div><div class="line">                height: 100px;</div><div class="line">                background-color: rgba(200,200,200,0.7);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wai"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nei"</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!--  &lt;div class="nei-item1"&gt;1&lt;/div&gt;</span></div><div class="line">                     &lt;div class="nei-item2"&gt;2&lt;/div&gt; --&gt;</div><div class="line">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="当我们同时设置bottom和top，nei盒子会自动抵触顶部。说明top优先级要比bottom高。"><a href="#当我们同时设置bottom和top，nei盒子会自动抵触顶部。说明top优先级要比bottom高。" class="headerlink" title="当我们同时设置bottom和top，nei盒子会自动抵触顶部。说明top优先级要比bottom高。"></a>当我们同时设置bottom和top，nei盒子会自动抵触顶部。说明top优先级要比bottom高。</h3><h3 id="当我们这个时候把nei盒子的高度去掉，这个时候神奇的事情发生了。nei的高度被撑开。"><a href="#当我们这个时候把nei盒子的高度去掉，这个时候神奇的事情发生了。nei的高度被撑开。" class="headerlink" title="当我们这个时候把nei盒子的高度去掉，这个时候神奇的事情发生了。nei的高度被撑开。"></a>当我们这个时候把nei盒子的高度去掉，这个时候神奇的事情发生了。nei的高度被撑开。</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170226/195039804.png" alt="mark"><br>同理width不设置，然后设置left,right为零，nei的宽度也会被撑开.</p>
<h3 id="为了确认宽高是来源于最邻近的定位点，而不是父级，我们在wai内在加个盒子wai2并设置宽高。"><a href="#为了确认宽高是来源于最邻近的定位点，而不是父级，我们在wai内在加个盒子wai2并设置宽高。" class="headerlink" title="为了确认宽高是来源于最邻近的定位点，而不是父级，我们在wai内在加个盒子wai2并设置宽高。"></a>为了确认宽高是来源于最邻近的定位点，而不是父级，我们在wai内在加个盒子wai2并设置宽高。</h3><p>1.nei盒子的宽高完全由上级定位节点，而不是父级确定。<br>2.nei盒子完全覆盖掉wai2的位置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></div><div class="line">                          .wai&#123;</div><div class="line">                position:relative;</div><div class="line">                top: 300px;</div><div class="line">                left: 300px;</div><div class="line">                width: 233px;</div><div class="line">                height: 370px;</div><div class="line">                background-color: yellow;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">                .wai2&#123;</div><div class="line">                width: 100px;</div><div class="line">                height: 100px;</div><div class="line">                background-color: yellow;</div><div class="line">                &#125;</div><div class="line">                 .nei&#123;</div><div class="line">                position: absolute;</div><div class="line">                top: 0px;</div><div class="line">                left: 0px;</div><div class="line">                right: 0px;</div><div class="line">                bottom: 0px;</div><div class="line">                background-color: red;</div><div class="line">                <span class="comment">&lt;!--background-color: rgba(200,200,200,0.7);--&gt;</span></div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wai"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wai2"</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nei"</span>&gt;</span></div><div class="line"></div><div class="line">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            </div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170226/201040072.png" alt="mark"></p>
<h2 id="对内"><a href="#对内" class="headerlink" title="对内"></a>对内</h2><h3 id="假如nei盒子的内部有其余盒子呢，比如我们在内部加两个盒子-不设置宽度。只设置高度。宽度可以继承。"><a href="#假如nei盒子的内部有其余盒子呢，比如我们在内部加两个盒子-不设置宽度。只设置高度。宽度可以继承。" class="headerlink" title="假如nei盒子的内部有其余盒子呢，比如我们在内部加两个盒子 不设置宽度。只设置高度。宽度可以继承。"></a>假如nei盒子的内部有其余盒子呢，比如我们在内部加两个盒子 不设置宽度。只设置高度。宽度可以继承。</h3><h3 id="而且nei盒子的宽高-还是wai盒子的宽高。但是nei盒子的内部盒子的高度已经溢出。"><a href="#而且nei盒子的宽高-还是wai盒子的宽高。但是nei盒子的内部盒子的高度已经溢出。" class="headerlink" title="而且nei盒子的宽高 还是wai盒子的宽高。但是nei盒子的内部盒子的高度已经溢出。"></a>而且nei盒子的宽高 还是wai盒子的宽高。但是nei盒子的内部盒子的高度已经溢出。</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170226/201912871.png" alt="mark"></p>
<h3 id="当nei盒子的内部盒子设置百分比时候，是相对于父级。同理height也是相对父级。可以设置都是50-50-看下"><a href="#当nei盒子的内部盒子设置百分比时候，是相对于父级。同理height也是相对父级。可以设置都是50-50-看下" class="headerlink" title="当nei盒子的内部盒子设置百分比时候，是相对于父级。同理height也是相对父级。可以设置都是50% 50%看下"></a>当nei盒子的内部盒子设置百分比时候，是相对于父级。同理height也是相对父级。可以设置都是50% 50%看下</h3><p><img src="http://ojlt0g866.bkt.clouddn.com/blog/20170226/202907572.png" alt="mark"></p>
<p>总结来说。利用这个特性，我们内部无需再设置宽度。可直接继承。这样的好处可以实现响应式的变化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  绝对定位一直用起来非常方便，直接脱离文本流。偶然发现它还有个超强的功能。竟然可以撑开盒子宽高。&lt;/p&gt;
&lt;h2 id=&quot;对外&quot;&gt;&lt;a href=&quot;#对外&quot; class=&quot;headerlink&quot; title=&quot;对外&quot;&gt;&lt;/a&gt;对外&lt;/h2&gt;&lt;h3 id=&quot;默认情况下，看代码；盒子如果设置-宽高后-设置绝对定位-bottom为0会自动抵底部。&quot;&gt;&lt;a href=&quot;#默认情况下，看代码；盒子如果设置-宽高后-设置绝对定位-bottom为0会自动抵底部。&quot; class=&quot;headerlink&quot; title=&quot;默认情况下，看代码；盒子如果设置   宽高后   设置绝对定位,bottom为0会自动抵底部。&quot;&gt;&lt;/a&gt;默认情况下，看代码；盒子如果设置   宽高后   设置绝对定位,bottom为0会自动抵底部。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ojlt0g866.bkt.clouddn.com/blog/20170226/194602705.png&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Document&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .wai&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                position:relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                top: 300px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                left: 300px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                width: 233px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                height: 370px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                background-color: yellow;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .nei&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                position: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                /*top: 0px;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                /*left: 0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                right: 0px;*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                bottom: 0px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                width: 100px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                height: 100px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                background-color: rgba(200,200,200,0.7);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wai&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nei&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--  &amp;lt;div class=&quot;nei-item1&quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     &amp;lt;div class=&quot;nei-item2&quot;&amp;gt;2&amp;lt;/div&amp;gt; --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://sunhao.win/categories/css/"/>
    
    
      <category term="position" scheme="http://sunhao.win/tags/position/"/>
    
      <category term="css" scheme="http://sunhao.win/tags/css/"/>
    
  </entry>
  
</feed>
